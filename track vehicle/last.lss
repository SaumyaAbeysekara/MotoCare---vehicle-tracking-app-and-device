
last.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002018  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001fe  00800060  00002018  000020ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b9  0080025e  0080025e  000022aa  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000022aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000373  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d5e  00000000  00000000  0000263d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d8  00000000  00000000  0000339b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bc5  00000000  00000000  00003673  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  00004238  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000529  00000000  00000000  00004488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000826  00000000  00000000  000049b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000051d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_13>
      38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

00000054 <pstr_inf>:
      54:	49 4e 46                                            INF

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_nan>:
      5c:	4e 41 4e                                            NAN

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      97:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      a7:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      b7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      c7:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      d7:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      e7:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
      f7:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     107:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     117:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     127:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     137:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     147:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     157:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     167:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     177:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     187:	3d 27 00                                            ='.

0000018a <__ctors_end>:
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf e5       	ldi	r28, 0x5F	; 95
     190:	d8 e0       	ldi	r29, 0x08	; 8
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e6       	ldi	r26, 0x60	; 96
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	e8 e1       	ldi	r30, 0x18	; 24
     19e:	f0 e2       	ldi	r31, 0x20	; 32
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <.do_copy_data_start>

000001a2 <.do_copy_data_loop>:
     1a2:	05 90       	lpm	r0, Z+
     1a4:	0d 92       	st	X+, r0

000001a6 <.do_copy_data_start>:
     1a6:	ae 35       	cpi	r26, 0x5E	; 94
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <.do_copy_data_loop>

000001ac <__do_clear_bss>:
     1ac:	14 e0       	ldi	r17, 0x04	; 4
     1ae:	ae e5       	ldi	r26, 0x5E	; 94
     1b0:	b2 e0       	ldi	r27, 0x02	; 2
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	a7 31       	cpi	r26, 0x17	; 23
     1b8:	b1 07       	cpc	r27, r17
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <main>
     1c0:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <LCD_Command>:
void LCD_String (char*);				/* Send string to LCD function */
void LCD_String_xy (char,char,char*);	/* Send row, position and string to LCD function */
void LCD_Clear (void);					/* LCD clear function */

void LCD_Command(char cmd) {
	LCD_Data_Port = cmd;
     1c8:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1 << RS) | (1 << RW));
     1ca:	85 b3       	in	r24, 0x15	; 21
     1cc:	8c 7f       	andi	r24, 0xFC	; 252
     1ce:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1 << EN);
     1d0:	aa 9a       	sbi	0x15, 2	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	8a 95       	dec	r24
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_Command+0xc>
	_delay_us(1);
	LCD_Command_Port &= ~(1 << EN);
     1d8:	aa 98       	cbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1da:	80 e7       	ldi	r24, 0x70	; 112
     1dc:	97 e1       	ldi	r25, 0x17	; 23
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_Command+0x16>
	_delay_ms(3);
}
     1e2:	08 95       	ret

000001e4 <LCD_Char>:

void LCD_Char(char char_data) {
	LCD_Data_Port = char_data;
     1e4:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1 << RW);
     1e6:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port |= (1 << EN) | (1 << RS);
     1e8:	85 b3       	in	r24, 0x15	; 21
     1ea:	85 60       	ori	r24, 0x05	; 5
     1ec:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1ee:	82 e0       	ldi	r24, 0x02	; 2
     1f0:	8a 95       	dec	r24
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCD_Char+0xc>
	_delay_us(1);
	LCD_Command_Port &= ~(1 << EN);
     1f4:	aa 98       	cbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f6:	80 ed       	ldi	r24, 0xD0	; 208
     1f8:	97 e0       	ldi	r25, 0x07	; 7
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCD_Char+0x16>
	_delay_ms(1);
}
     1fe:	08 95       	ret

00000200 <LCD_Init>:

void LCD_Init(void) {
	LCD_Command_Dir |= (1 << RS) | (1 << RW) | (1 << EN);
     200:	84 b3       	in	r24, 0x14	; 20
     202:	87 60       	ori	r24, 0x07	; 7
     204:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;
     206:	8f ef       	ldi	r24, 0xFF	; 255
     208:	87 bb       	out	0x17, r24	; 23
     20a:	80 e4       	ldi	r24, 0x40	; 64
     20c:	9c e9       	ldi	r25, 0x9C	; 156
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <LCD_Init+0xe>

	_delay_ms(20);
	LCD_Command(0x38);
     212:	88 e3       	ldi	r24, 0x38	; 56
     214:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
	LCD_Command(0x0C);
     218:	8c e0       	ldi	r24, 0x0C	; 12
     21a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
	LCD_Command(0x06);
     21e:	86 e0       	ldi	r24, 0x06	; 6
     220:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
	LCD_Command(0x01);
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
	LCD_Command(0x80);
     22a:	80 e8       	ldi	r24, 0x80	; 128
     22c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
}
     230:	08 95       	ret

00000232 <LCD_String>:

void LCD_String(char *str) {
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ec 01       	movw	r28, r24
     238:	02 c0       	rjmp	.+4      	; 0x23e <LCD_String+0xc>
	int i;
	for (i = 0; str[i] != 0; i++) {
		LCD_Char(str[i]);
     23a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_Char>
	LCD_Command(0x80);
}

void LCD_String(char *str) {
	int i;
	for (i = 0; str[i] != 0; i++) {
     23e:	89 91       	ld	r24, Y+
     240:	88 23       	and	r24, r24
     242:	d9 f7       	brne	.-10     	; 0x23a <LCD_String+0x8>
		LCD_Char(str[i]);
	}
}
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str) {
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	ea 01       	movw	r28, r20
	if (row == 1)
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	21 f4       	brne	.+8      	; 0x25c <LCD_String_xy+0x12>
	LCD_Command((pos & 0x0F) | 0x80);
     254:	6f 70       	andi	r22, 0x0F	; 15
     256:	86 2f       	mov	r24, r22
     258:	80 68       	ori	r24, 0x80	; 128
     25a:	11 c0       	rjmp	.+34     	; 0x27e <LCD_String_xy+0x34>
	else if (row == 2)
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	21 f4       	brne	.+8      	; 0x268 <LCD_String_xy+0x1e>
	LCD_Command((pos & 0x0F) | 0xC0);
     260:	6f 70       	andi	r22, 0x0F	; 15
     262:	86 2f       	mov	r24, r22
     264:	80 6c       	ori	r24, 0xC0	; 192
     266:	0b c0       	rjmp	.+22     	; 0x27e <LCD_String_xy+0x34>
	else if (row == 3)
     268:	83 30       	cpi	r24, 0x03	; 3
     26a:	21 f4       	brne	.+8      	; 0x274 <LCD_String_xy+0x2a>
	LCD_Command((pos & 0x0F) | 0x94);
     26c:	6b 70       	andi	r22, 0x0B	; 11
     26e:	86 2f       	mov	r24, r22
     270:	84 69       	ori	r24, 0x94	; 148
     272:	05 c0       	rjmp	.+10     	; 0x27e <LCD_String_xy+0x34>
	else if (row == 4)
     274:	84 30       	cpi	r24, 0x04	; 4
     276:	29 f4       	brne	.+10     	; 0x282 <LCD_String_xy+0x38>
	LCD_Command((pos & 0x0F) | 0xD4);
     278:	6b 70       	andi	r22, 0x0B	; 11
     27a:	86 2f       	mov	r24, r22
     27c:	84 6d       	ori	r24, 0xD4	; 212
     27e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
	LCD_String(str);
     282:	ce 01       	movw	r24, r28
     284:	0e 94 19 01 	call	0x232	; 0x232 <LCD_String>
}
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	08 95       	ret

0000028e <LCD_Clear>:

void LCD_Clear(void) {
	LCD_Command(0x01);
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
	LCD_Command(0x80);
     294:	80 e8       	ldi	r24, 0x80	; 128
     296:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Command>
}
     29a:	08 95       	ret

0000029c <UART_Init>:
void USART_SendString(char *str);




void UART_Init(unsigned long BAUDRATE) {
     29c:	9b 01       	movw	r18, r22
     29e:	ac 01       	movw	r20, r24
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     2a0:	8a b1       	in	r24, 0x0a	; 10
     2a2:	88 69       	ori	r24, 0x98	; 152
     2a4:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
     2a6:	80 b5       	in	r24, 0x20	; 32
     2a8:	86 68       	ori	r24, 0x86	; 134
     2aa:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRESCALE;
     2ac:	64 e0       	ldi	r22, 0x04	; 4
     2ae:	22 0f       	add	r18, r18
     2b0:	33 1f       	adc	r19, r19
     2b2:	44 1f       	adc	r20, r20
     2b4:	55 1f       	adc	r21, r21
     2b6:	6a 95       	dec	r22
     2b8:	d1 f7       	brne	.-12     	; 0x2ae <UART_Init+0x12>
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	72 e1       	ldi	r23, 0x12	; 18
     2be:	8a e7       	ldi	r24, 0x7A	; 122
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__udivmodsi4>
     2c6:	c9 01       	movw	r24, r18
     2c8:	da 01       	movw	r26, r20
     2ca:	21 50       	subi	r18, 0x01	; 1
     2cc:	29 b9       	out	0x09, r18	; 9
	UBRRH = (BAUD_PRESCALE >> 8);
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	a1 09       	sbc	r26, r1
     2d2:	b1 09       	sbc	r27, r1
     2d4:	89 2f       	mov	r24, r25
     2d6:	9a 2f       	mov	r25, r26
     2d8:	ab 2f       	mov	r26, r27
     2da:	bb 27       	eor	r27, r27
     2dc:	80 bd       	out	0x20, r24	; 32
}
     2de:	08 95       	ret

000002e0 <UART_RxChar>:

char UART_RxChar(void) {
	while (!(UCSRA & (1 << RXC)));
     2e0:	5f 9b       	sbis	0x0b, 7	; 11
     2e2:	fe cf       	rjmp	.-4      	; 0x2e0 <UART_RxChar>
	return (UDR);
     2e4:	8c b1       	in	r24, 0x0c	; 12
}
     2e6:	08 95       	ret

000002e8 <UART_TxChar>:

void UART_TxChar(char data) {
	UDR = data;
     2e8:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1 << UDRE)));
     2ea:	5d 9b       	sbis	0x0b, 5	; 11
     2ec:	fe cf       	rjmp	.-4      	; 0x2ea <UART_TxChar+0x2>
}
     2ee:	08 95       	ret

000002f0 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */
{
     2f0:	fc 01       	movw	r30, r24
     2f2:	04 c0       	rjmp	.+8      	; 0x2fc <USART_SendString+0xc>
	while (!(UCSRA & (1 << RXC)));
	return (UDR);
}

void UART_TxChar(char data) {
	UDR = data;
     2f4:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1 << UDRE)));
     2f6:	5d 9b       	sbis	0x0b, 5	; 11
     2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <USART_SendString+0x6>
     2fa:	31 96       	adiw	r30, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
     2fc:	80 81       	ld	r24, Z
     2fe:	88 23       	and	r24, r24
     300:	c9 f7       	brne	.-14     	; 0x2f4 <USART_SendString+0x4>
	{
		UART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
}
     302:	08 95       	ret

00000304 <__vector_13>:
        // Reset the dataSent flag to get the next set of data
        dataSent = 0;
    }
}

ISR(USART_RXC_vect) {
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	2f 93       	push	r18
     310:	3f 93       	push	r19
     312:	4f 93       	push	r20
     314:	5f 93       	push	r21
     316:	8f 93       	push	r24
     318:	9f 93       	push	r25
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
    uint8_t oldsrg = SREG;
     31e:	5f b7       	in	r21, 0x3f	; 63
    cli();
     320:	f8 94       	cli
    char received_char = UDR;
     322:	4c b1       	in	r20, 0x0c	; 12
	
	RESPONSE_BUFFER[Counter] =received_char;	/* Copy data to buffer & increment counter */
     324:	80 91 60 02 	lds	r24, 0x0260
     328:	90 91 61 02 	lds	r25, 0x0261
     32c:	fc 01       	movw	r30, r24
     32e:	ed 5e       	subi	r30, 0xED	; 237
     330:	fc 4f       	sbci	r31, 0xFC	; 252
     332:	40 83       	st	Z, r20
	Counter++;
     334:	01 96       	adiw	r24, 0x01	; 1
     336:	90 93 61 02 	sts	0x0261, r25
     33a:	80 93 60 02 	sts	0x0260, r24
	if(Counter == DEFAULT_BUFFER_SIZE)
     33e:	88 3c       	cpi	r24, 0xC8	; 200
     340:	91 05       	cpc	r25, r1
     342:	21 f4       	brne	.+8      	; 0x34c <__vector_13+0x48>
		Counter = 0;
     344:	10 92 61 02 	sts	0x0261, r1
     348:	10 92 60 02 	sts	0x0260, r1

    if (received_char == '$') {
     34c:	44 32       	cpi	r20, 0x24	; 36
     34e:	59 f4       	brne	.+22     	; 0x366 <__vector_13+0x62>
        GGA_Index = 0;
     350:	10 92 ed 03 	sts	0x03ED, r1
     354:	10 92 ec 03 	sts	0x03EC, r1
        CommaCounter = 0;
     358:	10 92 eb 03 	sts	0x03EB, r1
     35c:	10 92 ea 03 	sts	0x03EA, r1
        IsItGGAString = false;
     360:	10 92 5e 02 	sts	0x025E, r1
     364:	45 c0       	rjmp	.+138    	; 0x3f0 <__vector_13+0xec>
    } else if (IsItGGAString == true) {
     366:	80 91 5e 02 	lds	r24, 0x025E
     36a:	88 23       	and	r24, r24
     36c:	09 f1       	breq	.+66     	; 0x3b0 <__vector_13+0xac>
        if (received_char == ',') GGA_Pointers[CommaCounter++] = GGA_Index;
     36e:	4c 32       	cpi	r20, 0x2C	; 44
     370:	89 f4       	brne	.+34     	; 0x394 <__vector_13+0x90>
     372:	80 91 ea 03 	lds	r24, 0x03EA
     376:	90 91 eb 03 	lds	r25, 0x03EB
     37a:	20 91 ec 03 	lds	r18, 0x03EC
     37e:	30 91 ed 03 	lds	r19, 0x03ED
     382:	fc 01       	movw	r30, r24
     384:	e0 50       	subi	r30, 0x00	; 0
     386:	fc 4f       	sbci	r31, 0xFC	; 252
     388:	20 83       	st	Z, r18
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	90 93 eb 03 	sts	0x03EB, r25
     390:	80 93 ea 03 	sts	0x03EA, r24
        GGA_Buffer[GGA_Index++] = received_char;
     394:	80 91 ec 03 	lds	r24, 0x03EC
     398:	90 91 ed 03 	lds	r25, 0x03ED
     39c:	fc 01       	movw	r30, r24
     39e:	e7 59       	subi	r30, 0x97	; 151
     3a0:	fd 4f       	sbci	r31, 0xFD	; 253
     3a2:	40 83       	st	Z, r20
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	90 93 ed 03 	sts	0x03ED, r25
     3aa:	80 93 ec 03 	sts	0x03EC, r24
     3ae:	20 c0       	rjmp	.+64     	; 0x3f0 <__vector_13+0xec>
    } else if (GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A') {
     3b0:	80 91 ee 03 	lds	r24, 0x03EE
     3b4:	87 34       	cpi	r24, 0x47	; 71
     3b6:	91 f4       	brne	.+36     	; 0x3dc <__vector_13+0xd8>
     3b8:	80 91 ef 03 	lds	r24, 0x03EF
     3bc:	87 34       	cpi	r24, 0x47	; 71
     3be:	71 f4       	brne	.+28     	; 0x3dc <__vector_13+0xd8>
     3c0:	80 91 f0 03 	lds	r24, 0x03F0
     3c4:	81 34       	cpi	r24, 0x41	; 65
     3c6:	51 f4       	brne	.+20     	; 0x3dc <__vector_13+0xd8>
        IsItGGAString = true;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	80 93 5e 02 	sts	0x025E, r24
        GGA_CODE[0] = 0;
     3ce:	10 92 ee 03 	sts	0x03EE, r1
        GGA_CODE[1] = 0;
     3d2:	10 92 ef 03 	sts	0x03EF, r1
        GGA_CODE[2] = 0;
     3d6:	10 92 f0 03 	sts	0x03F0, r1
     3da:	0a c0       	rjmp	.+20     	; 0x3f0 <__vector_13+0xec>
    } else {
        GGA_CODE[0] = GGA_CODE[1];
     3dc:	80 91 ef 03 	lds	r24, 0x03EF
     3e0:	80 93 ee 03 	sts	0x03EE, r24
        GGA_CODE[1] = GGA_CODE[2];
     3e4:	80 91 f0 03 	lds	r24, 0x03F0
     3e8:	80 93 ef 03 	sts	0x03EF, r24
        GGA_CODE[2] = received_char;
     3ec:	40 93 f0 03 	sts	0x03F0, r20
    }
    SREG = oldsrg;
     3f0:	5f bf       	out	0x3f, r21	; 63
}
     3f2:	ff 91       	pop	r31
     3f4:	ef 91       	pop	r30
     3f6:	9f 91       	pop	r25
     3f8:	8f 91       	pop	r24
     3fa:	5f 91       	pop	r21
     3fc:	4f 91       	pop	r20
     3fe:	3f 91       	pop	r19
     400:	2f 91       	pop	r18
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <Buffer_Flush>:
	} while(Response_Status == SIM900_RESPONSE_WAITING);
}

void Buffer_Flush(void)		/* Flush all variables */
{
	memset(RESPONSE_BUFFER, 0, DEFAULT_BUFFER_SIZE);
     40c:	88 ec       	ldi	r24, 0xC8	; 200
     40e:	e3 e1       	ldi	r30, 0x13	; 19
     410:	f3 e0       	ldi	r31, 0x03	; 3
     412:	df 01       	movw	r26, r30
     414:	1d 92       	st	X+, r1
     416:	8a 95       	dec	r24
     418:	e9 f7       	brne	.-6      	; 0x414 <Buffer_Flush+0x8>
	Counter=0;
     41a:	10 92 61 02 	sts	0x0261, r1
     41e:	10 92 60 02 	sts	0x0260, r1
}
     422:	08 95       	ret

00000424 <GetResponseBody>:

/* Remove CRLF and other default strings from response */ 
void GetResponseBody(char* Response, uint16_t ResponseLength)
{
     424:	cf 92       	push	r12
     426:	df 92       	push	r13
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	df 93       	push	r29
     432:	cf 93       	push	r28
     434:	00 d0       	rcall	.+0      	; 0x436 <GetResponseBody+0x12>
     436:	00 d0       	rcall	.+0      	; 0x438 <GetResponseBody+0x14>
     438:	0f 92       	push	r0
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	7c 01       	movw	r14, r24
     440:	7c e0       	ldi	r23, 0x0C	; 12
     442:	c7 2e       	mov	r12, r23
     444:	d1 2c       	mov	r13, r1
     446:	03 c0       	rjmp	.+6      	; 0x44e <GetResponseBody+0x2a>
	uint16_t i = 12;
	char buffer[5];
	while(Response[i] != '\r' && i < 100)
		++i;
     448:	08 94       	sec
     44a:	c1 1c       	adc	r12, r1
     44c:	d1 1c       	adc	r13, r1
/* Remove CRLF and other default strings from response */ 
void GetResponseBody(char* Response, uint16_t ResponseLength)
{
	uint16_t i = 12;
	char buffer[5];
	while(Response[i] != '\r' && i < 100)
     44e:	f7 01       	movw	r30, r14
     450:	ec 0d       	add	r30, r12
     452:	fd 1d       	adc	r31, r13
     454:	80 81       	ld	r24, Z
     456:	8d 30       	cpi	r24, 0x0D	; 13
     458:	21 f0       	breq	.+8      	; 0x462 <GetResponseBody+0x3e>
     45a:	84 e6       	ldi	r24, 0x64	; 100
     45c:	c8 16       	cp	r12, r24
     45e:	d1 04       	cpc	r13, r1
     460:	99 f7       	brne	.-26     	; 0x448 <GetResponseBody+0x24>
		++i;

	strncpy(buffer, Response + 12, (i - 12));
     462:	b7 01       	movw	r22, r14
     464:	64 5f       	subi	r22, 0xF4	; 244
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	a6 01       	movw	r20, r12
     46a:	4c 50       	subi	r20, 0x0C	; 12
     46c:	50 40       	sbci	r21, 0x00	; 0
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	0e 94 c1 08 	call	0x1182	; 0x1182 <strncpy>
	ResponseLength = atoi(buffer);

	i += 2;
     476:	c6 01       	movw	r24, r12
     478:	02 96       	adiw	r24, 0x02	; 2
	uint16_t tmp = strlen(Response) - i;
     47a:	d7 01       	movw	r26, r14
     47c:	0d 90       	ld	r0, X+
     47e:	00 20       	and	r0, r0
     480:	e9 f7       	brne	.-6      	; 0x47c <GetResponseBody+0x58>
     482:	8d 01       	movw	r16, r26
     484:	01 50       	subi	r16, 0x01	; 1
     486:	10 40       	sbci	r17, 0x00	; 0
     488:	0e 19       	sub	r16, r14
     48a:	1f 09       	sbc	r17, r15
     48c:	08 1b       	sub	r16, r24
     48e:	19 0b       	sbc	r17, r25
	memcpy(Response, Response + i, tmp);
     490:	97 01       	movw	r18, r14
     492:	28 0f       	add	r18, r24
     494:	39 1f       	adc	r19, r25
     496:	c7 01       	movw	r24, r14
     498:	b9 01       	movw	r22, r18
     49a:	a8 01       	movw	r20, r16
     49c:	0e 94 a3 08 	call	0x1146	; 0x1146 <memcpy>

	if(!strncmp(Response + tmp - 6, "\r\nOK\r\n", 6))
     4a0:	06 50       	subi	r16, 0x06	; 6
     4a2:	10 40       	sbci	r17, 0x00	; 0
     4a4:	0e 0d       	add	r16, r14
     4a6:	1f 1d       	adc	r17, r15
     4a8:	c8 01       	movw	r24, r16
     4aa:	60 e6       	ldi	r22, 0x60	; 96
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	46 e0       	ldi	r20, 0x06	; 6
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	0e 94 b3 08 	call	0x1166	; 0x1166 <strncmp>
     4b6:	00 97       	sbiw	r24, 0x00	; 0
     4b8:	49 f4       	brne	.+18     	; 0x4cc <GetResponseBody+0xa8>
	memset(Response + tmp - 6, 0, i + 6);
     4ba:	96 01       	movw	r18, r12
     4bc:	28 5f       	subi	r18, 0xF8	; 248
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	c8 01       	movw	r24, r16
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	a9 01       	movw	r20, r18
     4c8:	0e 94 ac 08 	call	0x1158	; 0x1158 <memset>
}
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	cf 91       	pop	r28
     4d8:	df 91       	pop	r29
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	df 90       	pop	r13
     4e4:	cf 90       	pop	r12
     4e6:	08 95       	ret

000004e8 <Read_Response>:

    dtostrf(position, 6, 4, degrees_buffer);
}

void Read_Response(void)		/* Read response */
{
     4e8:	2f 92       	push	r2
     4ea:	3f 92       	push	r3
     4ec:	4f 92       	push	r4
     4ee:	5f 92       	push	r5
     4f0:	6f 92       	push	r6
     4f2:	7f 92       	push	r7
     4f4:	8f 92       	push	r8
     4f6:	9f 92       	push	r9
     4f8:	af 92       	push	r10
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	aa 24       	eor	r10, r10
     50e:	bb 24       	eor	r11, r11
     510:	65 01       	movw	r12, r10
     512:	e0 ed       	ldi	r30, 0xD0	; 208
     514:	2e 2e       	mov	r2, r30
     516:	e7 e0       	ldi	r30, 0x07	; 7
     518:	3e 2e       	mov	r3, r30
   static char CRLF_BUF[2];
   static char CRLF_FOUND;
   uint32_t TimeCount = 0, ResponseBufferLength;
   while(1)
   {
      if(TimeCount >= (DEFAULT_TIMEOUT+TimeOut))
     51a:	80 91 62 02 	lds	r24, 0x0262
     51e:	90 91 63 02 	lds	r25, 0x0263
     522:	a0 91 64 02 	lds	r26, 0x0264
     526:	b0 91 65 02 	lds	r27, 0x0265
     52a:	80 5e       	subi	r24, 0xE0	; 224
     52c:	91 4b       	sbci	r25, 0xB1	; 177
     52e:	af 4f       	sbci	r26, 0xFF	; 255
     530:	bf 4f       	sbci	r27, 0xFF	; 255
     532:	a8 16       	cp	r10, r24
     534:	b9 06       	cpc	r11, r25
     536:	ca 06       	cpc	r12, r26
     538:	db 06       	cpc	r13, r27
     53a:	60 f0       	brcs	.+24     	; 0x554 <Read_Response+0x6c>
	{
	   CRLF_COUNT = 0; TimeOut = 0;
     53c:	10 92 5f 02 	sts	0x025F, r1
     540:	10 92 62 02 	sts	0x0262, r1
     544:	10 92 63 02 	sts	0x0263, r1
     548:	10 92 64 02 	sts	0x0264, r1
     54c:	10 92 65 02 	sts	0x0265, r1
	   Response_Status = SIM900_RESPONSE_TIMEOUT;
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	52 c0       	rjmp	.+164    	; 0x5f8 <Read_Response+0x110>
	   return;
	}

      if(Response_Status == SIM900_RESPONSE_STARTING)
     554:	80 91 14 04 	lds	r24, 0x0414
     558:	84 30       	cpi	r24, 0x04	; 4
     55a:	41 f4       	brne	.+16     	; 0x56c <Read_Response+0x84>
	{
	   CRLF_FOUND = 0;
     55c:	10 92 66 02 	sts	0x0266, r1
	   memset(CRLF_BUF, 0, 2);
     560:	10 92 68 02 	sts	0x0268, r1
     564:	10 92 67 02 	sts	0x0267, r1
	   Response_Status = SIM900_RESPONSE_WAITING;
     568:	10 92 14 04 	sts	0x0414, r1
	}
      ResponseBufferLength = strlen(RESPONSE_BUFFER);
     56c:	e3 e1       	ldi	r30, 0x13	; 19
     56e:	f3 e0       	ldi	r31, 0x03	; 3
     570:	01 90       	ld	r0, Z+
     572:	00 20       	and	r0, r0
     574:	e9 f7       	brne	.-6      	; 0x570 <Read_Response+0x88>
     576:	31 97       	sbiw	r30, 0x01	; 1
     578:	e3 51       	subi	r30, 0x13	; 19
     57a:	f3 40       	sbci	r31, 0x03	; 3
     57c:	2f 01       	movw	r4, r30
     57e:	66 24       	eor	r6, r6
     580:	77 24       	eor	r7, r7
      if (ResponseBufferLength)
     582:	41 14       	cp	r4, r1
     584:	51 04       	cpc	r5, r1
     586:	61 04       	cpc	r6, r1
     588:	71 04       	cpc	r7, r1
     58a:	09 f4       	brne	.+2      	; 0x58e <Read_Response+0xa6>
     58c:	5d c0       	rjmp	.+186    	; 0x648 <Read_Response+0x160>
     58e:	c1 01       	movw	r24, r2
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <Read_Response+0xa8>
		{
		   memmove(CRLF_BUF, CRLF_BUF + 1, 1);
		   CRLF_BUF[1] = RESPONSE_BUFFER[i];
		   if(!strncmp(CRLF_BUF, "\r\n", 2))
		   {
		      if(++CRLF_FOUND == (DEFAULT_CRLF_COUNT+CRLF_COUNT))
     594:	80 91 5f 02 	lds	r24, 0x025F
     598:	88 2e       	mov	r8, r24
     59a:	99 24       	eor	r9, r9
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	88 0e       	add	r8, r24
     5a2:	99 1e       	adc	r9, r25
     5a4:	c3 e1       	ldi	r28, 0x13	; 19
     5a6:	d3 e0       	ldi	r29, 0x03	; 3
     5a8:	ee 24       	eor	r14, r14
     5aa:	ff 24       	eor	r15, r15
     5ac:	87 01       	movw	r16, r14
	   TimeCount++;
	   if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
	      {
		for (uint16_t i=0;i<ResponseBufferLength;i++)
		{
		   memmove(CRLF_BUF, CRLF_BUF + 1, 1);
     5ae:	80 91 68 02 	lds	r24, 0x0268
     5b2:	80 93 67 02 	sts	0x0267, r24
		   CRLF_BUF[1] = RESPONSE_BUFFER[i];
     5b6:	88 81       	ld	r24, Y
     5b8:	80 93 68 02 	sts	0x0268, r24
		   if(!strncmp(CRLF_BUF, "\r\n", 2))
     5bc:	87 e6       	ldi	r24, 0x67	; 103
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	67 e6       	ldi	r22, 0x67	; 103
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	42 e0       	ldi	r20, 0x02	; 2
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	0e 94 b3 08 	call	0x1166	; 0x1166 <strncmp>
     5cc:	00 97       	sbiw	r24, 0x00	; 0
     5ce:	49 f5       	brne	.+82     	; 0x622 <Read_Response+0x13a>
		   {
		      if(++CRLF_FOUND == (DEFAULT_CRLF_COUNT+CRLF_COUNT))
     5d0:	80 91 66 02 	lds	r24, 0x0266
     5d4:	8f 5f       	subi	r24, 0xFF	; 255
     5d6:	80 93 66 02 	sts	0x0266, r24
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	88 15       	cp	r24, r8
     5de:	99 05       	cpc	r25, r9
     5e0:	01 f5       	brne	.+64     	; 0x622 <Read_Response+0x13a>
			{
			   CRLF_COUNT = 0; TimeOut = 0;
     5e2:	10 92 5f 02 	sts	0x025F, r1
     5e6:	10 92 62 02 	sts	0x0262, r1
     5ea:	10 92 63 02 	sts	0x0263, r1
     5ee:	10 92 64 02 	sts	0x0264, r1
     5f2:	10 92 65 02 	sts	0x0265, r1
			   Response_Status = SIM900_RESPONSE_FINISHED;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 14 04 	sts	0x0414, r24
	}
      }
      _delay_ms(1);
      TimeCount++;
   }
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	bf 90       	pop	r11
     60e:	af 90       	pop	r10
     610:	9f 90       	pop	r9
     612:	8f 90       	pop	r8
     614:	7f 90       	pop	r7
     616:	6f 90       	pop	r6
     618:	5f 90       	pop	r5
     61a:	4f 90       	pop	r4
     61c:	3f 90       	pop	r3
     61e:	2f 90       	pop	r2
     620:	08 95       	ret
		   {
		      if(++CRLF_FOUND == (DEFAULT_CRLF_COUNT+CRLF_COUNT))
			{
			   CRLF_COUNT = 0; TimeOut = 0;
			   Response_Status = SIM900_RESPONSE_FINISHED;
			   return;
     622:	08 94       	sec
     624:	e1 1c       	adc	r14, r1
     626:	f1 1c       	adc	r15, r1
     628:	01 1d       	adc	r16, r1
     62a:	11 1d       	adc	r17, r1
     62c:	21 96       	adiw	r28, 0x01	; 1
	{
	   _delay_ms(1);
	   TimeCount++;
	   if (ResponseBufferLength==strlen(RESPONSE_BUFFER))
	      {
		for (uint16_t i=0;i<ResponseBufferLength;i++)
     62e:	e4 14       	cp	r14, r4
     630:	f5 04       	cpc	r15, r5
     632:	06 05       	cpc	r16, r6
     634:	17 05       	cpc	r17, r7
     636:	08 f4       	brcc	.+2      	; 0x63a <Read_Response+0x152>
     638:	ba cf       	rjmp	.-140    	; 0x5ae <Read_Response+0xc6>
	}
      ResponseBufferLength = strlen(RESPONSE_BUFFER);
      if (ResponseBufferLength)
	{
	   _delay_ms(1);
	   TimeCount++;
     63a:	08 94       	sec
     63c:	a1 1c       	adc	r10, r1
     63e:	b1 1c       	adc	r11, r1
     640:	c1 1c       	adc	r12, r1
     642:	d1 1c       	adc	r13, r1
			   Response_Status = SIM900_RESPONSE_FINISHED;
			   return;
			}
		   }
		}
	   CRLF_FOUND = 0;
     644:	10 92 66 02 	sts	0x0266, r1
     648:	c1 01       	movw	r24, r2
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <Read_Response+0x162>
	}
      }
      _delay_ms(1);
      TimeCount++;
     64e:	08 94       	sec
     650:	a1 1c       	adc	r10, r1
     652:	b1 1c       	adc	r11, r1
     654:	c1 1c       	adc	r12, r1
     656:	d1 1c       	adc	r13, r1
     658:	60 cf       	rjmp	.-320    	; 0x51a <Read_Response+0x32>

0000065a <Start_Read_Response>:
   }
}

void Start_Read_Response(void)
{
	Response_Status = SIM900_RESPONSE_STARTING;
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	80 93 14 04 	sts	0x0414, r24
	do {
		Read_Response();
     660:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Read_Response>
	} while(Response_Status == SIM900_RESPONSE_WAITING);
     664:	80 91 14 04 	lds	r24, 0x0414
     668:	88 23       	and	r24, r24
     66a:	d1 f3       	breq	.-12     	; 0x660 <Start_Read_Response+0x6>
}
     66c:	08 95       	ret

0000066e <WaitForExpectedResponse>:
	if(!strncmp(Response + tmp - 6, "\r\nOK\r\n", 6))
	memset(Response + tmp - 6, 0, i + 6);
}

bool WaitForExpectedResponse(char* ExpectedResponse)
{
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ec 01       	movw	r28, r24
	Buffer_Flush();
     674:	0e 94 06 02 	call	0x40c	; 0x40c <Buffer_Flush>
     678:	80 ed       	ldi	r24, 0xD0	; 208
     67a:	97 e0       	ldi	r25, 0x07	; 7
     67c:	28 ec       	ldi	r18, 0xC8	; 200
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	f9 01       	movw	r30, r18
     682:	31 97       	sbiw	r30, 0x01	; 1
     684:	f1 f7       	brne	.-4      	; 0x682 <WaitForExpectedResponse+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     686:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     688:	d9 f7       	brne	.-10     	; 0x680 <WaitForExpectedResponse+0x12>
	_delay_ms(200);
	Start_Read_Response();		/* First read response */
     68a:	0e 94 2d 03 	call	0x65a	; 0x65a <Start_Read_Response>
	if((Response_Status != SIM900_RESPONSE_TIMEOUT) && (strstr(RESPONSE_BUFFER, ExpectedResponse) != NULL))
     68e:	80 91 14 04 	lds	r24, 0x0414
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	11 f4       	brne	.+4      	; 0x69a <WaitForExpectedResponse+0x2c>
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0a c0       	rjmp	.+20     	; 0x6ae <WaitForExpectedResponse+0x40>
     69a:	83 e1       	ldi	r24, 0x13	; 19
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	be 01       	movw	r22, r28
     6a0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <strstr>
     6a4:	9c 01       	movw	r18, r24
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	23 2b       	or	r18, r19
     6aa:	09 f0       	breq	.+2      	; 0x6ae <WaitForExpectedResponse+0x40>
     6ac:	81 e0       	ldi	r24, 0x01	; 1
		return true;		/* Return true for success */
	return false;			/* Else return false */
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <HTTP_Read>:
		USART_SendString("AT+HTTPACTION=1\r");
	return WaitForExpectedResponse("OK");
}

bool HTTP_Read(uint8_t StartByte, uint16_t ByteSize) /* Read HTTP response */
{
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	69 97       	sbiw	r28, 0x19	; 25
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	7b 01       	movw	r14, r22
	char Command[25];
	sprintf(Command,"AT+HTTPREAD=%d,%d\r",StartByte,ByteSize);
     6d2:	2d b7       	in	r18, 0x3d	; 61
     6d4:	3e b7       	in	r19, 0x3e	; 62
     6d6:	28 50       	subi	r18, 0x08	; 8
     6d8:	30 40       	sbci	r19, 0x00	; 0
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	3e bf       	out	0x3e, r19	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	2d bf       	out	0x3d, r18	; 61
     6e4:	ed b7       	in	r30, 0x3d	; 61
     6e6:	fe b7       	in	r31, 0x3e	; 62
     6e8:	31 96       	adiw	r30, 0x01	; 1
     6ea:	8e 01       	movw	r16, r28
     6ec:	0f 5f       	subi	r16, 0xFF	; 255
     6ee:	1f 4f       	sbci	r17, 0xFF	; 255
     6f0:	ad b7       	in	r26, 0x3d	; 61
     6f2:	be b7       	in	r27, 0x3e	; 62
     6f4:	12 96       	adiw	r26, 0x02	; 2
     6f6:	1c 93       	st	X, r17
     6f8:	0e 93       	st	-X, r16
     6fa:	11 97       	sbiw	r26, 0x01	; 1
     6fc:	2a e6       	ldi	r18, 0x6A	; 106
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	33 83       	std	Z+3, r19	; 0x03
     702:	22 83       	std	Z+2, r18	; 0x02
     704:	84 83       	std	Z+4, r24	; 0x04
     706:	15 82       	std	Z+5, r1	; 0x05
     708:	77 83       	std	Z+7, r23	; 0x07
     70a:	66 83       	std	Z+6, r22	; 0x06
     70c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <sprintf>
	Command[24] = 0;
     710:	19 8e       	std	Y+25, r1	; 0x19
	USART_SendString(Command);
     712:	2d b7       	in	r18, 0x3d	; 61
     714:	3e b7       	in	r19, 0x3e	; 62
     716:	28 5f       	subi	r18, 0xF8	; 248
     718:	3f 4f       	sbci	r19, 0xFF	; 255
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	3e bf       	out	0x3e, r19	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	2d bf       	out	0x3d, r18	; 61
     724:	c8 01       	movw	r24, r16
     726:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>

	CRLF_COUNT = 2;										/* Make additional crlf count for response */
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	80 93 5f 02 	sts	0x025F, r24
	if(WaitForExpectedResponse("+HTTPREAD"))
     730:	8d e7       	ldi	r24, 0x7D	; 125
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
     738:	88 23       	and	r24, r24
     73a:	31 f0       	breq	.+12     	; 0x748 <HTTP_Read+0x94>
	{
		GetResponseBody(RESPONSE_BUFFER, ByteSize);
     73c:	83 e1       	ldi	r24, 0x13	; 19
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	b7 01       	movw	r22, r14
     742:	0e 94 12 02 	call	0x424	; 0x424 <GetResponseBody>
     746:	81 e0       	ldi	r24, 0x01	; 1
		return true;
	}
	else
		return false;
}
     748:	69 96       	adiw	r28, 0x19	; 25
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	cf 91       	pop	r28
     756:	df 91       	pop	r29
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	08 95       	ret

00000762 <HTTP_Action>:
		return false;
}

bool HTTP_Action(char method)	/* Select HTTP Action */
{
	if(method == GET)
     762:	88 23       	and	r24, r24
     764:	19 f4       	brne	.+6      	; 0x76c <HTTP_Action+0xa>
		USART_SendString("AT+HTTPACTION=0\r");
     766:	87 e8       	ldi	r24, 0x87	; 135
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	04 c0       	rjmp	.+8      	; 0x774 <HTTP_Action+0x12>
	if(method == POST)
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	21 f4       	brne	.+8      	; 0x778 <HTTP_Action+0x16>
		USART_SendString("AT+HTTPACTION=1\r");
     770:	88 e9       	ldi	r24, 0x98	; 152
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	return WaitForExpectedResponse("OK");
     778:	89 ea       	ldi	r24, 0xA9	; 169
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
}
     780:	08 95       	ret

00000782 <HTTP_Save>:
	return HTTP_Parameter("CONTENT", "application/json");
}

bool HTTP_Save(void)		/* Save the application context */
{
	USART_SendString("AT+HTTPSCONT\r");
     782:	8c ea       	ldi	r24, 0xAC	; 172
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	return WaitForExpectedResponse("OK");
     78a:	89 ea       	ldi	r24, 0xA9	; 169
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
}
     792:	08 95       	ret

00000794 <HTTP_Connected>:
	return HTTP_Parameter("URL", url);
}

bool HTTP_Connected(void)		/* Check for connected */
{
	USART_SendString("AT+SAPBR=2,1\r");
     794:	8a eb       	ldi	r24, 0xBA	; 186
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	CRLF_COUNT = 2;										/* Make additional crlf count for response */
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	80 93 5f 02 	sts	0x025F, r24
	return WaitForExpectedResponse("+SAPBR: 1,1");
     7a2:	88 ec       	ldi	r24, 0xC8	; 200
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
}
     7aa:	08 95       	ret

000007ac <HTTP_Terminate>:
	return WaitForExpectedResponse("OK");
}

bool HTTP_Terminate(void)		/* terminate HTTP */
{
	USART_SendString("AT+HTTPTERM\r");
     7ac:	84 ed       	ldi	r24, 0xD4	; 212
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	return WaitForExpectedResponse("OK");
     7b4:	89 ea       	ldi	r24, 0xA9	; 169
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
}
     7bc:	08 95       	ret

000007be <HTTP_Init>:
	return WaitForExpectedResponse("OK");
}

bool HTTP_Init(void)		/* Initiate HTTP */
{
	USART_SendString("AT+HTTPINIT\r");
     7be:	81 ee       	ldi	r24, 0xE1	; 225
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	return WaitForExpectedResponse("OK");
     7c6:	89 ea       	ldi	r24, 0xA9	; 169
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
}
     7ce:	08 95       	ret

000007d0 <SIM900HTTP_Init>:
	return SIM900_RESPONSE_FINISHED;
}

bool SIM900HTTP_Init(void)
{
	HTTP_Terminate();
     7d0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <HTTP_Terminate>
	return HTTP_Init();
     7d4:	0e 94 df 03 	call	0x7be	; 0x7be <HTTP_Init>
}
     7d8:	08 95       	ret

000007da <SIM900HTTP_Connect>:
	}
	return false;
}
	
bool SIM900HTTP_Connect(char* _APN, char* _USERNAME, char* _PASSWORD) /* Connect to GPRS */
{
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	ec 01       	movw	r28, r24
     7e8:	8b 01       	movw	r16, r22
     7ea:	7a 01       	movw	r14, r20

	USART_SendString("AT+CREG?\r");
     7ec:	8e ee       	ldi	r24, 0xEE	; 238
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	if(!WaitForExpectedResponse("+CREG: 0,1"))
     7f4:	88 ef       	ldi	r24, 0xF8	; 248
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
     7fc:	88 23       	and	r24, r24
     7fe:	09 f4       	brne	.+2      	; 0x802 <SIM900HTTP_Connect+0x28>
     800:	45 c0       	rjmp	.+138    	; 0x88c <__stack+0x2d>
		return false;

	USART_SendString("AT+SAPBR=0,1\r");
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	WaitForExpectedResponse("OK");
     80a:	89 ea       	ldi	r24, 0xA9	; 169
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>

	USART_SendString("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r");
     812:	81 e1       	ldi	r24, 0x11	; 17
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	WaitForExpectedResponse("OK");
     81a:	89 ea       	ldi	r24, 0xA9	; 169
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>

	USART_SendString("AT+SAPBR=3,1,\"APN\",\"");
     822:	80 e3       	ldi	r24, 0x30	; 48
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	USART_SendString(_APN);
     82a:	ce 01       	movw	r24, r28
     82c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	USART_SendString("\"\r");
     830:	85 e4       	ldi	r24, 0x45	; 69
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	WaitForExpectedResponse("OK");
     838:	89 ea       	ldi	r24, 0xA9	; 169
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>

	USART_SendString("AT+SAPBR=3,1,\"USER\",\"");
     840:	88 e4       	ldi	r24, 0x48	; 72
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	USART_SendString(_USERNAME);
     848:	c8 01       	movw	r24, r16
     84a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	USART_SendString("\"\r");
     84e:	85 e4       	ldi	r24, 0x45	; 69
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	WaitForExpectedResponse("OK");
     856:	89 ea       	ldi	r24, 0xA9	; 169
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>

	USART_SendString("AT+SAPBR=3,1,\"PWD\",\"");
     85e:	8e e5       	ldi	r24, 0x5E	; 94
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	USART_SendString(_PASSWORD);
     866:	c7 01       	movw	r24, r14
     868:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	USART_SendString("\"\r");
     86c:	85 e4       	ldi	r24, 0x45	; 69
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	WaitForExpectedResponse("OK");
     874:	89 ea       	ldi	r24, 0xA9	; 169
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>

	USART_SendString("AT+SAPBR=1,1\r");
     87c:	83 e7       	ldi	r24, 0x73	; 115
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	return WaitForExpectedResponse("OK");
     884:	89 ea       	ldi	r24, 0xA9	; 169
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	08 95       	ret

0000089a <HTTP_Parameter>:
	UART_TxChar('\r');
	return WaitForExpectedResponse(ExpectedResponse);
}

bool HTTP_Parameter(char* Parameter, char* Value)/* Set HTTP parameter and return response */
{
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	8c 01       	movw	r16, r24
     8a4:	7b 01       	movw	r14, r22
	
	USART_SendString("AT+HTTPPARA=\"");
     8a6:	81 e8       	ldi	r24, 0x81	; 129
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	USART_SendString(Parameter);
     8ae:	c8 01       	movw	r24, r16
     8b0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	USART_SendString("\",\"");
     8b4:	8f e8       	ldi	r24, 0x8F	; 143
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	USART_SendString(Value);
     8bc:	c7 01       	movw	r24, r14
     8be:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	USART_SendString("\"\r");
     8c2:	85 e4       	ldi	r24, 0x45	; 69
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	return WaitForExpectedResponse("OK");
     8ca:	89 ea       	ldi	r24, 0xA9	; 169
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
}
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	08 95       	ret

000008dc <HTTP_SetPost_json>:
	return WaitForExpectedResponse("+SAPBR: 1,1");
}

bool HTTP_SetPost_json(void)	/* Set Json Application format for post */
{
	return HTTP_Parameter("CONTENT", "application/json");
     8dc:	83 e9       	ldi	r24, 0x93	; 147
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	6b e9       	ldi	r22, 0x9B	; 155
     8e2:	71 e0       	ldi	r23, 0x01	; 1
     8e4:	0e 94 4d 04 	call	0x89a	; 0x89a <HTTP_Parameter>
}
     8e8:	08 95       	ret

000008ea <HTTP_SetURL>:
	USART_SendString("AT+HTTPTERM\r");
	return WaitForExpectedResponse("OK");
}

bool HTTP_SetURL(char * url)	/* Set URL */
{
     8ea:	bc 01       	movw	r22, r24
	return HTTP_Parameter("URL", url);
     8ec:	8c ea       	ldi	r24, 0xAC	; 172
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	0e 94 4d 04 	call	0x89a	; 0x89a <HTTP_Parameter>
}
     8f4:	08 95       	ret

000008f6 <HTTP_get>:
	HTTP_Read(0, ResponseLength);
	return SIM900_RESPONSE_FINISHED;
}

uint8_t HTTP_get(char * _URL, uint16_t ResponseLength)
{
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	8c 01       	movw	r16, r24
     900:	eb 01       	movw	r28, r22
	HTTP_Parameter("CID","1");
     902:	80 eb       	ldi	r24, 0xB0	; 176
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	64 eb       	ldi	r22, 0xB4	; 180
     908:	71 e0       	ldi	r23, 0x01	; 1
     90a:	0e 94 4d 04 	call	0x89a	; 0x89a <HTTP_Parameter>
	HTTP_Parameter("URL", _URL);
     90e:	8c ea       	ldi	r24, 0xAC	; 172
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	b8 01       	movw	r22, r16
     914:	0e 94 4d 04 	call	0x89a	; 0x89a <HTTP_Parameter>
	HTTP_Action(GET);
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	0e 94 b1 03 	call	0x762	; 0x762 <HTTP_Action>
	WaitForExpectedResponse("+HTTPACTION:0,");
     91e:	86 eb       	ldi	r24, 0xB6	; 182
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
	if(Response_Status == SIM900_RESPONSE_TIMEOUT)
     926:	80 91 14 04 	lds	r24, 0x0414
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	29 f0       	breq	.+10     	; 0x938 <HTTP_get+0x42>
	return SIM900_RESPONSE_TIMEOUT;

	HTTP_Read(0, ResponseLength);
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	be 01       	movw	r22, r28
     932:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <HTTP_Read>
     936:	81 e0       	ldi	r24, 0x01	; 1
	return SIM900_RESPONSE_FINISHED;
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret

00000942 <SendATandExpectResponse>:
		return true;		/* Return true for success */
	return false;			/* Else return false */
}

bool SendATandExpectResponse(char* ATCommand, char* ExpectedResponse)
{
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	eb 01       	movw	r28, r22
	USART_SendString(ATCommand);	/* Send AT command to SIM900 */
     948:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	while (!(UCSRA & (1 << RXC)));
	return (UDR);
}

void UART_TxChar(char data) {
	UDR = data;
     94c:	8d e0       	ldi	r24, 0x0D	; 13
     94e:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1 << UDRE)));
     950:	5d 9b       	sbis	0x0b, 5	; 11
     952:	fe cf       	rjmp	.-4      	; 0x950 <SendATandExpectResponse+0xe>
	UART_TxChar('\r');
	return WaitForExpectedResponse(ExpectedResponse);
     954:	ce 01       	movw	r24, r28
     956:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <SIM900HTTP_Start>:
	USART_SendString("\"\r");
	return WaitForExpectedResponse("OK");
}

bool SIM900HTTP_Start(void)			/* Check SIM900 board */
{
     960:	1f 93       	push	r17
     962:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i=0;i<5;i++)
	{
		if(SendATandExpectResponse("ATE0","OK")||SendATandExpectResponse("AT","OK"))
     964:	85 ec       	ldi	r24, 0xC5	; 197
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	69 ea       	ldi	r22, 0xA9	; 169
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	0e 94 a1 04 	call	0x942	; 0x942 <SendATandExpectResponse>
     970:	88 23       	and	r24, r24
     972:	41 f4       	brne	.+16     	; 0x984 <SIM900HTTP_Start+0x24>
     974:	8a ec       	ldi	r24, 0xCA	; 202
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	69 ea       	ldi	r22, 0xA9	; 169
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	0e 94 a1 04 	call	0x942	; 0x942 <SendATandExpectResponse>
     980:	88 23       	and	r24, r24
     982:	41 f0       	breq	.+16     	; 0x994 <SIM900HTTP_Start+0x34>
		{
			HTTP_Parameter("CID","1");
     984:	80 eb       	ldi	r24, 0xB0	; 176
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	64 eb       	ldi	r22, 0xB4	; 180
     98a:	71 e0       	ldi	r23, 0x01	; 1
     98c:	0e 94 4d 04 	call	0x89a	; 0x89a <HTTP_Parameter>
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	04 c0       	rjmp	.+8      	; 0x99c <SIM900HTTP_Start+0x3c>
	return WaitForExpectedResponse("OK");
}

bool SIM900HTTP_Start(void)			/* Check SIM900 board */
{
	for (uint8_t i=0;i<5;i++)
     994:	1f 5f       	subi	r17, 0xFF	; 255
     996:	15 30       	cpi	r17, 0x05	; 5
     998:	29 f7       	brne	.-54     	; 0x964 <SIM900HTTP_Start+0x4>
     99a:	80 e0       	ldi	r24, 0x00	; 0
			HTTP_Parameter("CID","1");
			return true;
		}
	}
	return false;
}
     99c:	1f 91       	pop	r17
     99e:	08 95       	ret

000009a0 <HTTP_Data>:
	USART_SendString("AT+HTTPSCONT\r");
	return WaitForExpectedResponse("OK");
}

bool HTTP_Data(char* data)	/* Load HTTP data */
{
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	df 93       	push	r29
     9aa:	cf 93       	push	r28
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	69 97       	sbiw	r28, 0x19	; 25
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	f8 2e       	mov	r15, r24
     9be:	e9 2e       	mov	r14, r25
	char _buffer[25];
	sprintf(_buffer, "AT+HTTPDATA=%d,%d\r", strlen(data), 10000);
     9c0:	e8 2f       	mov	r30, r24
     9c2:	f9 2f       	mov	r31, r25
     9c4:	df 01       	movw	r26, r30
     9c6:	0d 90       	ld	r0, X+
     9c8:	00 20       	and	r0, r0
     9ca:	e9 f7       	brne	.-6      	; 0x9c6 <HTTP_Data+0x26>
     9cc:	11 97       	sbiw	r26, 0x01	; 1
     9ce:	ae 1b       	sub	r26, r30
     9d0:	bf 0b       	sbc	r27, r31
     9d2:	8d b7       	in	r24, 0x3d	; 61
     9d4:	9e b7       	in	r25, 0x3e	; 62
     9d6:	08 97       	sbiw	r24, 0x08	; 8
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	9e bf       	out	0x3e, r25	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	8d bf       	out	0x3d, r24	; 61
     9e2:	2d b7       	in	r18, 0x3d	; 61
     9e4:	3e b7       	in	r19, 0x3e	; 62
     9e6:	2f 5f       	subi	r18, 0xFF	; 255
     9e8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ea:	8e 01       	movw	r16, r28
     9ec:	0f 5f       	subi	r16, 0xFF	; 255
     9ee:	1f 4f       	sbci	r17, 0xFF	; 255
     9f0:	ed b7       	in	r30, 0x3d	; 61
     9f2:	fe b7       	in	r31, 0x3e	; 62
     9f4:	12 83       	std	Z+2, r17	; 0x02
     9f6:	01 83       	std	Z+1, r16	; 0x01
     9f8:	8d ec       	ldi	r24, 0xCD	; 205
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	f9 01       	movw	r30, r18
     9fe:	93 83       	std	Z+3, r25	; 0x03
     a00:	82 83       	std	Z+2, r24	; 0x02
     a02:	b5 83       	std	Z+5, r27	; 0x05
     a04:	a4 83       	std	Z+4, r26	; 0x04
     a06:	80 e1       	ldi	r24, 0x10	; 16
     a08:	97 e2       	ldi	r25, 0x27	; 39
     a0a:	97 83       	std	Z+7, r25	; 0x07
     a0c:	86 83       	std	Z+6, r24	; 0x06
     a0e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <sprintf>
	USART_SendString(_buffer);
     a12:	8d b7       	in	r24, 0x3d	; 61
     a14:	9e b7       	in	r25, 0x3e	; 62
     a16:	08 96       	adiw	r24, 0x08	; 8
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	9e bf       	out	0x3e, r25	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	8d bf       	out	0x3d, r24	; 61
     a22:	c8 01       	movw	r24, r16
     a24:	0e 94 78 01 	call	0x2f0	; 0x2f0 <USART_SendString>
	
	if(WaitForExpectedResponse("DOWNLOAD"))
     a28:	80 ee       	ldi	r24, 0xE0	; 224
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
     a30:	88 23       	and	r24, r24
     a32:	31 f0       	breq	.+12     	; 0xa40 <HTTP_Data+0xa0>
		return SendATandExpectResponse(data, "OK");
     a34:	8f 2d       	mov	r24, r15
     a36:	9e 2d       	mov	r25, r14
     a38:	69 ea       	ldi	r22, 0xA9	; 169
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	0e 94 a1 04 	call	0x942	; 0x942 <SendATandExpectResponse>
	else
		return false;
}
     a40:	69 96       	adiw	r28, 0x19	; 25
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	cf 91       	pop	r28
     a4e:	df 91       	pop	r29
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	08 95       	ret

00000a5a <HTTP_Post>:
	else
		return false;
}

uint8_t HTTP_Post(char* Parameters, uint16_t ResponseLength)
{
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	8c 01       	movw	r16, r24
     a64:	eb 01       	movw	r28, r22
	HTTP_Parameter("CID","1");
     a66:	80 eb       	ldi	r24, 0xB0	; 176
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	64 eb       	ldi	r22, 0xB4	; 180
     a6c:	71 e0       	ldi	r23, 0x01	; 1
     a6e:	0e 94 4d 04 	call	0x89a	; 0x89a <HTTP_Parameter>
	if(!(HTTP_Data(Parameters) && HTTP_Action(POST)))
     a72:	c8 01       	movw	r24, r16
     a74:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <HTTP_Data>
     a78:	88 23       	and	r24, r24
     a7a:	c1 f0       	breq	.+48     	; 0xaac <HTTP_Post+0x52>
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	0e 94 b1 03 	call	0x762	; 0x762 <HTTP_Action>
     a82:	88 23       	and	r24, r24
     a84:	99 f0       	breq	.+38     	; 0xaac <HTTP_Post+0x52>
	return SIM900_RESPONSE_TIMEOUT;

	bool status200 = WaitForExpectedResponse(",200,");
     a86:	89 ee       	ldi	r24, 0xE9	; 233
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	0e 94 37 03 	call	0x66e	; 0x66e <WaitForExpectedResponse>
     a8e:	98 2f       	mov	r25, r24

	if(Response_Status == SIM900_RESPONSE_TIMEOUT)
     a90:	80 91 14 04 	lds	r24, 0x0414
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	51 f0       	breq	.+20     	; 0xaac <HTTP_Post+0x52>
	return SIM900_RESPONSE_TIMEOUT;
	if(!status200)
     a98:	99 23       	and	r25, r25
     a9a:	11 f4       	brne	.+4      	; 0xaa0 <HTTP_Post+0x46>
     a9c:	85 e0       	ldi	r24, 0x05	; 5
     a9e:	07 c0       	rjmp	.+14     	; 0xaae <HTTP_Post+0x54>
	return SIM900_RESPONSE_ERROR;

	HTTP_Read(0, ResponseLength);
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	be 01       	movw	r22, r28
     aa4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <HTTP_Read>
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <HTTP_Post+0x54>
	return SIM900_RESPONSE_FINISHED;
     aac:	82 e0       	ldi	r24, 0x02	; 2
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	08 95       	ret

00000ab8 <convert_to_degrees>:





void convert_to_degrees(char *raw) {
     ab8:	af 92       	push	r10
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
    double value;
    float decimal_value, temp;
    int32_t degrees;
    float position;

    value = atof(raw);
     ac8:	0e 94 9f 08 	call	0x113e	; 0x113e <atof>

    decimal_value = (value / 100);
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	48 ec       	ldi	r20, 0xC8	; 200
     ad2:	52 e4       	ldi	r21, 0x42	; 66
     ad4:	0e 94 35 07 	call	0xe6a	; 0xe6a <__divsf3>
     ad8:	7b 01       	movw	r14, r22
     ada:	8c 01       	movw	r16, r24
    degrees = (int)(decimal_value);
     adc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fixsfsi>
    temp = (decimal_value - (int)decimal_value) / 0.6;
    position = (float)degrees + temp;

    dtostrf(position, 6, 4, degrees_buffer);
     ae0:	88 27       	eor	r24, r24
     ae2:	77 fd       	sbrc	r23, 7
     ae4:	80 95       	com	r24
     ae6:	98 2f       	mov	r25, r24
     ae8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__floatsisf>
     aec:	5b 01       	movw	r10, r22
     aee:	6c 01       	movw	r12, r24
     af0:	c8 01       	movw	r24, r16
     af2:	b7 01       	movw	r22, r14
     af4:	a6 01       	movw	r20, r12
     af6:	95 01       	movw	r18, r10
     af8:	0e 94 d0 06 	call	0xda0	; 0xda0 <__subsf3>
     afc:	2a e9       	ldi	r18, 0x9A	; 154
     afe:	39 e9       	ldi	r19, 0x99	; 153
     b00:	49 e1       	ldi	r20, 0x19	; 25
     b02:	5f e3       	ldi	r21, 0x3F	; 63
     b04:	0e 94 35 07 	call	0xe6a	; 0xe6a <__divsf3>
     b08:	9b 01       	movw	r18, r22
     b0a:	ac 01       	movw	r20, r24
     b0c:	c6 01       	movw	r24, r12
     b0e:	b5 01       	movw	r22, r10
     b10:	0e 94 d1 06 	call	0xda2	; 0xda2 <__addsf3>
     b14:	46 e0       	ldi	r20, 0x06	; 6
     b16:	24 e0       	ldi	r18, 0x04	; 4
     b18:	0f ef       	ldi	r16, 0xFF	; 255
     b1a:	12 e0       	ldi	r17, 0x02	; 2
     b1c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <dtostrf>
}
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	ef 90       	pop	r14
     b28:	df 90       	pop	r13
     b2a:	cf 90       	pop	r12
     b2c:	bf 90       	pop	r11
     b2e:	af 90       	pop	r10
     b30:	08 95       	ret

00000b32 <get_longitude>:
    convert_to_degrees(Latitude_Buffer);
    sei();
}

void get_longitude(uint16_t long_pointer) {
    cli();
     b32:	f8 94       	cli
    uint8_t long_index = 0;
    uint8_t index = long_pointer + 1;
     b34:	8f 5f       	subi	r24, 0xFF	; 255
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <get_longitude+0xe>

    for (; GGA_Buffer[index] != ','; index++) {
        Longitude_Buffer[long_index] = GGA_Buffer[index];
     b3a:	e5 52       	subi	r30, 0x25	; 37
     b3c:	fc 4f       	sbci	r31, 0xFC	; 252
     b3e:	20 83       	st	Z, r18
void get_longitude(uint16_t long_pointer) {
    cli();
    uint8_t long_index = 0;
    uint8_t index = long_pointer + 1;

    for (; GGA_Buffer[index] != ','; index++) {
     b40:	e8 2f       	mov	r30, r24
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	e7 59       	subi	r30, 0x97	; 151
     b46:	fd 4f       	sbci	r31, 0xFD	; 253
     b48:	20 81       	ld	r18, Z
     b4a:	e9 2f       	mov	r30, r25
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	9f 5f       	subi	r25, 0xFF	; 255
     b50:	8f 5f       	subi	r24, 0xFF	; 255
     b52:	2c 32       	cpi	r18, 0x2C	; 44
     b54:	91 f7       	brne	.-28     	; 0xb3a <get_longitude+0x8>
        Longitude_Buffer[long_index] = GGA_Buffer[index];
        long_index++;
    }

    Longitude_Buffer[long_index++] = GGA_Buffer[index++];
     b56:	e5 52       	subi	r30, 0x25	; 37
     b58:	fc 4f       	sbci	r31, 0xFC	; 252
     b5a:	20 83       	st	Z, r18
    Longitude_Buffer[long_index] = GGA_Buffer[index];
     b5c:	e9 2f       	mov	r30, r25
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	e5 52       	subi	r30, 0x25	; 37
     b62:	fc 4f       	sbci	r31, 0xFC	; 252
     b64:	a8 2f       	mov	r26, r24
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	a7 59       	subi	r26, 0x97	; 151
     b6a:	bd 4f       	sbci	r27, 0xFD	; 253
     b6c:	8c 91       	ld	r24, X
     b6e:	80 83       	st	Z, r24

    convert_to_degrees(Longitude_Buffer);
     b70:	8b ed       	ldi	r24, 0xDB	; 219
     b72:	93 e0       	ldi	r25, 0x03	; 3
     b74:	0e 94 5c 05 	call	0xab8	; 0xab8 <convert_to_degrees>
    sei();
     b78:	78 94       	sei
}
     b7a:	08 95       	ret

00000b7c <get_latitude>:
 



void get_latitude(uint16_t lat_pointer) {
    cli();
     b7c:	f8 94       	cli
    uint8_t lat_index = 0;
    uint8_t index = lat_pointer + 1;
     b7e:	8f 5f       	subi	r24, 0xFF	; 255
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	07 c0       	rjmp	.+14     	; 0xb92 <get_latitude+0x16>

    while (GGA_Buffer[index] != ',' && GGA_Buffer[index] != '\0') {
        Latitude_Buffer[lat_index] = GGA_Buffer[index];
     b84:	e9 2f       	mov	r30, r25
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	ef 50       	subi	r30, 0x0F	; 15
     b8a:	fc 4f       	sbci	r31, 0xFC	; 252
     b8c:	20 83       	st	Z, r18
        lat_index++;
     b8e:	9f 5f       	subi	r25, 0xFF	; 255
        index++;
     b90:	8f 5f       	subi	r24, 0xFF	; 255
void get_latitude(uint16_t lat_pointer) {
    cli();
    uint8_t lat_index = 0;
    uint8_t index = lat_pointer + 1;

    while (GGA_Buffer[index] != ',' && GGA_Buffer[index] != '\0') {
     b92:	e8 2f       	mov	r30, r24
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	e7 59       	subi	r30, 0x97	; 151
     b98:	fd 4f       	sbci	r31, 0xFD	; 253
     b9a:	20 81       	ld	r18, Z
     b9c:	2c 32       	cpi	r18, 0x2C	; 44
     b9e:	11 f0       	breq	.+4      	; 0xba4 <get_latitude+0x28>
     ba0:	22 23       	and	r18, r18
     ba2:	81 f7       	brne	.-32     	; 0xb84 <get_latitude+0x8>
        Latitude_Buffer[lat_index] = GGA_Buffer[index];
        lat_index++;
        index++;
    }

    Latitude_Buffer[lat_index] = '\0';
     ba4:	e9 2f       	mov	r30, r25
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	ef 50       	subi	r30, 0x0F	; 15
     baa:	fc 4f       	sbci	r31, 0xFC	; 252
     bac:	10 82       	st	Z, r1

    if (GGA_Buffer[index] == ',') {
     bae:	2c 32       	cpi	r18, 0x2C	; 44
     bb0:	69 f4       	brne	.+26     	; 0xbcc <get_latitude+0x50>
        Latitude_Buffer[lat_index++] = GGA_Buffer[index++];
     bb2:	20 83       	st	Z, r18
        Latitude_Buffer[lat_index] = GGA_Buffer[index];
     bb4:	9f 5f       	subi	r25, 0xFF	; 255
     bb6:	e9 2f       	mov	r30, r25
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	ef 50       	subi	r30, 0x0F	; 15
     bbc:	fc 4f       	sbci	r31, 0xFC	; 252
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	a8 2f       	mov	r26, r24
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	a7 59       	subi	r26, 0x97	; 151
     bc6:	bd 4f       	sbci	r27, 0xFD	; 253
     bc8:	8c 91       	ld	r24, X
     bca:	80 83       	st	Z, r24
    }

    convert_to_degrees(Latitude_Buffer);
     bcc:	81 ef       	ldi	r24, 0xF1	; 241
     bce:	93 e0       	ldi	r25, 0x03	; 3
     bd0:	0e 94 5c 05 	call	0xab8	; 0xab8 <convert_to_degrees>
    sei();
     bd4:	78 94       	sei
}
     bd6:	08 95       	ret

00000bd8 <main>:
}




int main(void) {
     bd8:	2f 92       	push	r2
     bda:	3f 92       	push	r3
     bdc:	4f 92       	push	r4
     bde:	5f 92       	push	r5
     be0:	6f 92       	push	r6
     be2:	7f 92       	push	r7
     be4:	8f 92       	push	r8
     be6:	9f 92       	push	r9
     be8:	af 92       	push	r10
     bea:	bf 92       	push	r11
     bec:	cf 92       	push	r12
     bee:	df 92       	push	r13
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	c4 56       	subi	r28, 0x64	; 100
     c02:	d0 40       	sbci	r29, 0x00	; 0
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
    GGA_Index = 0;
     c0e:	10 92 ed 03 	sts	0x03ED, r1
     c12:	10 92 ec 03 	sts	0x03EC, r1
    memset(GGA_Buffer, 0, Buffer_Size);
     c16:	86 e9       	ldi	r24, 0x96	; 150
     c18:	e9 e6       	ldi	r30, 0x69	; 105
     c1a:	f2 e0       	ldi	r31, 0x02	; 2
     c1c:	df 01       	movw	r26, r30
     c1e:	1d 92       	st	X+, r1
     c20:	8a 95       	dec	r24
     c22:	e9 f7       	brne	.-6      	; 0xc1e <main+0x46>
    memset(degrees_buffer, 0, degrees_buffer_size);
     c24:	84 e1       	ldi	r24, 0x14	; 20
     c26:	ef ef       	ldi	r30, 0xFF	; 255
     c28:	f2 e0       	ldi	r31, 0x02	; 2
     c2a:	df 01       	movw	r26, r30
     c2c:	1d 92       	st	X+, r1
     c2e:	8a 95       	dec	r24
     c30:	e9 f7       	brne	.-6      	; 0xc2c <main+0x54>

    char _buffer[100];

    LCD_Init();
     c32:	0e 94 00 01 	call	0x200	; 0x200 <LCD_Init>
     c36:	80 e3       	ldi	r24, 0x30	; 48
     c38:	95 e7       	ldi	r25, 0x75	; 117
     c3a:	28 ec       	ldi	r18, 0xC8	; 200
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	f9 01       	movw	r30, r18
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <main+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c44:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c46:	d9 f7       	brne	.-10     	; 0xc3e <main+0x66>
    _delay_ms(3000);
    UART_Init(9600);
     c48:	60 e8       	ldi	r22, 0x80	; 128
     c4a:	75 e2       	ldi	r23, 0x25	; 37
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 4e 01 	call	0x29c	; 0x29c <UART_Init>
    sei();
     c54:	78 94       	sei
     c56:	20 e1       	ldi	r18, 0x10	; 16
     c58:	37 e2       	ldi	r19, 0x27	; 39
            }
			
			/* Take local buffer to copy response from the server */
			uint16_t responseLength = 100;
			#ifdef POST_DEMO /* POST Sample data on the server */
			memset(_buffer, 0, 100);
     c5a:	94 e6       	ldi	r25, 0x64	; 100
     c5c:	29 2e       	mov	r2, r25
     c5e:	7e 01       	movw	r14, r28
     c60:	08 94       	sec
     c62:	e1 1c       	adc	r14, r1
     c64:	f1 1c       	adc	r15, r1
			HTTP_SetURL(URL);
			HTTP_Save();
			sprintf(_buffer, "api_key=%s&field1=%s&field2=%s", API_WRITE_KEY, Latitude_Buffer, Longitude_Buffer);
     c66:	81 e2       	ldi	r24, 0x21	; 33
     c68:	48 2e       	mov	r4, r24
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	58 2e       	mov	r5, r24
     c6e:	00 e4       	ldi	r16, 0x40	; 64
     c70:	60 2e       	mov	r6, r16
     c72:	02 e0       	ldi	r16, 0x02	; 2
     c74:	70 2e       	mov	r7, r16
     c76:	11 ef       	ldi	r17, 0xF1	; 241
     c78:	81 2e       	mov	r8, r17
     c7a:	13 e0       	ldi	r17, 0x03	; 3
     c7c:	91 2e       	mov	r9, r17
     c7e:	bb ed       	ldi	r27, 0xDB	; 219
     c80:	ab 2e       	mov	r10, r27
     c82:	b3 e0       	ldi	r27, 0x03	; 3
     c84:	bb 2e       	mov	r11, r27
     c86:	08 ec       	ldi	r16, 0xC8	; 200
     c88:	10 e0       	ldi	r17, 0x00	; 0
        }
		
		// Display the GPS data
		LCD_String_xy(1, 0, "Lat: ");
		get_latitude(GGA_Pointers[0]);
		LCD_String(degrees_buffer);
     c8a:	af ef       	ldi	r26, 0xFF	; 255
     c8c:	ca 2e       	mov	r12, r26
     c8e:	a2 e0       	ldi	r26, 0x02	; 2
     c90:	da 2e       	mov	r13, r26
		memset(degrees_buffer, 0, degrees_buffer_size);
     c92:	f4 e1       	ldi	r31, 0x14	; 20
     c94:	3f 2e       	mov	r3, r31
     c96:	05 c0       	rjmp	.+10     	; 0xca2 <main+0xca>
     c98:	c8 01       	movw	r24, r16
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <main+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c9e:	21 50       	subi	r18, 0x01	; 1
     ca0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca2:	21 15       	cp	r18, r1
     ca4:	31 05       	cpc	r19, r1
     ca6:	c1 f7       	brne	.-16     	; 0xc98 <main+0xc0>
    while (1) {
        _delay_ms(1000);
        
        // If data has not been sent, read GPS data and send it
        if (!dataSent) {
            if (!HTTP_Connected()) /* Check whether GPRS connected */
     ca8:	0e 94 ca 03 	call	0x794	; 0x794 <HTTP_Connected>
     cac:	88 23       	and	r24, r24
     cae:	51 f4       	brne	.+20     	; 0xcc4 <main+0xec>
            {
                SIM900HTTP_Connect(APN, USERNAME, PASSWORD);
     cb0:	8f ee       	ldi	r24, 0xEF	; 239
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	6f ef       	ldi	r22, 0xFF	; 255
     cb6:	71 e0       	ldi	r23, 0x01	; 1
     cb8:	46 e0       	ldi	r20, 0x06	; 6
     cba:	52 e0       	ldi	r21, 0x02	; 2
     cbc:	0e 94 ed 03 	call	0x7da	; 0x7da <SIM900HTTP_Connect>
                SIM900HTTP_Init();
     cc0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SIM900HTTP_Init>
            }
			
			/* Take local buffer to copy response from the server */
			uint16_t responseLength = 100;
			#ifdef POST_DEMO /* POST Sample data on the server */
			memset(_buffer, 0, 100);
     cc4:	f7 01       	movw	r30, r14
     cc6:	82 2d       	mov	r24, r2
     cc8:	11 92       	st	Z+, r1
     cca:	8a 95       	dec	r24
     ccc:	e9 f7       	brne	.-6      	; 0xcc8 <main+0xf0>
			HTTP_SetURL(URL);
     cce:	87 e0       	ldi	r24, 0x07	; 7
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	0e 94 75 04 	call	0x8ea	; 0x8ea <HTTP_SetURL>
			HTTP_Save();
     cd6:	0e 94 c1 03 	call	0x782	; 0x782 <HTTP_Save>
			sprintf(_buffer, "api_key=%s&field1=%s&field2=%s", API_WRITE_KEY, Latitude_Buffer, Longitude_Buffer);
     cda:	ad b7       	in	r26, 0x3d	; 61
     cdc:	be b7       	in	r27, 0x3e	; 62
     cde:	1a 97       	sbiw	r26, 0x0a	; 10
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	be bf       	out	0x3e, r27	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	ad bf       	out	0x3d, r26	; 61
     cea:	ed b7       	in	r30, 0x3d	; 61
     cec:	fe b7       	in	r31, 0x3e	; 62
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	12 96       	adiw	r26, 0x02	; 2
     cf2:	fc 92       	st	X, r15
     cf4:	ee 92       	st	-X, r14
     cf6:	11 97       	sbiw	r26, 0x01	; 1
     cf8:	53 82       	std	Z+3, r5	; 0x03
     cfa:	42 82       	std	Z+2, r4	; 0x02
     cfc:	75 82       	std	Z+5, r7	; 0x05
     cfe:	64 82       	std	Z+4, r6	; 0x04
     d00:	97 82       	std	Z+7, r9	; 0x07
     d02:	86 82       	std	Z+6, r8	; 0x06
     d04:	b1 86       	std	Z+9, r11	; 0x09
     d06:	a0 86       	std	Z+8, r10	; 0x08
     d08:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <sprintf>
			HTTP_Post(_buffer, responseLength);
     d0c:	ed b7       	in	r30, 0x3d	; 61
     d0e:	fe b7       	in	r31, 0x3e	; 62
     d10:	3a 96       	adiw	r30, 0x0a	; 10
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	fe bf       	out	0x3e, r31	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	ed bf       	out	0x3d, r30	; 61
     d1c:	c7 01       	movw	r24, r14
     d1e:	64 e6       	ldi	r22, 0x64	; 100
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	0e 94 2d 05 	call	0xa5a	; 0xa5a <HTTP_Post>
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	9f ef       	ldi	r25, 0xFF	; 255
     d2a:	f8 01       	movw	r30, r16
     d2c:	31 97       	sbiw	r30, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <main+0x154>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d30:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d32:	d9 f7       	brne	.-10     	; 0xd2a <main+0x152>
			dataSent = 1; // Mark data as sent
			
        }
		
		// Display the GPS data
		LCD_String_xy(1, 0, "Lat: ");
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	41 e5       	ldi	r20, 0x51	; 81
     d3a:	52 e0       	ldi	r21, 0x02	; 2
     d3c:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_String_xy>
		get_latitude(GGA_Pointers[0]);
     d40:	80 91 00 04 	lds	r24, 0x0400
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 be 05 	call	0xb7c	; 0xb7c <get_latitude>
		LCD_String(degrees_buffer);
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	0e 94 19 01 	call	0x232	; 0x232 <LCD_String>
		memset(degrees_buffer, 0, degrees_buffer_size);
     d52:	d6 01       	movw	r26, r12
     d54:	e3 2d       	mov	r30, r3
     d56:	1d 92       	st	X+, r1
     d58:	ea 95       	dec	r30
     d5a:	e9 f7       	brne	.-6      	; 0xd56 <main+0x17e>

		if (strlen(Latitude_Buffer) > 0) {
     d5c:	80 91 f1 03 	lds	r24, 0x03F1
     d60:	88 23       	and	r24, r24
     d62:	a1 f0       	breq	.+40     	; 0xd8c <main+0x1b4>
			LCD_String_xy(2, 0, "Long: ");
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	47 e5       	ldi	r20, 0x57	; 87
     d6a:	52 e0       	ldi	r21, 0x02	; 2
     d6c:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_String_xy>
			get_longitude(GGA_Pointers[2]);
     d70:	80 91 02 04 	lds	r24, 0x0402
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 99 05 	call	0xb32	; 0xb32 <get_longitude>
			LCD_String(degrees_buffer);
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	0e 94 19 01 	call	0x232	; 0x232 <LCD_String>
			memset(degrees_buffer, 0, degrees_buffer_size);
     d82:	d6 01       	movw	r26, r12
     d84:	e3 2d       	mov	r30, r3
     d86:	1d 92       	st	X+, r1
     d88:	ea 95       	dec	r30
     d8a:	e9 f7       	brne	.-6      	; 0xd86 <main+0x1ae>
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	9f ef       	ldi	r25, 0xFF	; 255
     d90:	f8 01       	movw	r30, r16
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <main+0x1ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d98:	d9 f7       	brne	.-10     	; 0xd90 <main+0x1b8>
     d9a:	20 e1       	ldi	r18, 0x10	; 16
     d9c:	37 e2       	ldi	r19, 0x27	; 39
     d9e:	7c cf       	rjmp	.-264    	; 0xc98 <main+0xc0>

00000da0 <__subsf3>:
     da0:	50 58       	subi	r21, 0x80	; 128

00000da2 <__addsf3>:
     da2:	bb 27       	eor	r27, r27
     da4:	aa 27       	eor	r26, r26
     da6:	0e d0       	rcall	.+28     	; 0xdc4 <__addsf3x>
     da8:	4d c1       	rjmp	.+666    	; 0x1044 <__fp_round>
     daa:	3e d1       	rcall	.+636    	; 0x1028 <__fp_pscA>
     dac:	30 f0       	brcs	.+12     	; 0xdba <__addsf3+0x18>
     dae:	43 d1       	rcall	.+646    	; 0x1036 <__fp_pscB>
     db0:	20 f0       	brcs	.+8      	; 0xdba <__addsf3+0x18>
     db2:	31 f4       	brne	.+12     	; 0xdc0 <__addsf3+0x1e>
     db4:	9f 3f       	cpi	r25, 0xFF	; 255
     db6:	11 f4       	brne	.+4      	; 0xdbc <__addsf3+0x1a>
     db8:	1e f4       	brtc	.+6      	; 0xdc0 <__addsf3+0x1e>
     dba:	33 c1       	rjmp	.+614    	; 0x1022 <__fp_nan>
     dbc:	0e f4       	brtc	.+2      	; 0xdc0 <__addsf3+0x1e>
     dbe:	e0 95       	com	r30
     dc0:	e7 fb       	bst	r30, 7
     dc2:	29 c1       	rjmp	.+594    	; 0x1016 <__fp_inf>

00000dc4 <__addsf3x>:
     dc4:	e9 2f       	mov	r30, r25
     dc6:	4f d1       	rcall	.+670    	; 0x1066 <__fp_split3>
     dc8:	80 f3       	brcs	.-32     	; 0xdaa <__addsf3+0x8>
     dca:	ba 17       	cp	r27, r26
     dcc:	62 07       	cpc	r22, r18
     dce:	73 07       	cpc	r23, r19
     dd0:	84 07       	cpc	r24, r20
     dd2:	95 07       	cpc	r25, r21
     dd4:	18 f0       	brcs	.+6      	; 0xddc <__addsf3x+0x18>
     dd6:	71 f4       	brne	.+28     	; 0xdf4 <__addsf3x+0x30>
     dd8:	9e f5       	brtc	.+102    	; 0xe40 <__addsf3x+0x7c>
     dda:	67 c1       	rjmp	.+718    	; 0x10aa <__fp_zero>
     ddc:	0e f4       	brtc	.+2      	; 0xde0 <__addsf3x+0x1c>
     dde:	e0 95       	com	r30
     de0:	0b 2e       	mov	r0, r27
     de2:	ba 2f       	mov	r27, r26
     de4:	a0 2d       	mov	r26, r0
     de6:	0b 01       	movw	r0, r22
     de8:	b9 01       	movw	r22, r18
     dea:	90 01       	movw	r18, r0
     dec:	0c 01       	movw	r0, r24
     dee:	ca 01       	movw	r24, r20
     df0:	a0 01       	movw	r20, r0
     df2:	11 24       	eor	r1, r1
     df4:	ff 27       	eor	r31, r31
     df6:	59 1b       	sub	r21, r25
     df8:	99 f0       	breq	.+38     	; 0xe20 <__addsf3x+0x5c>
     dfa:	59 3f       	cpi	r21, 0xF9	; 249
     dfc:	50 f4       	brcc	.+20     	; 0xe12 <__addsf3x+0x4e>
     dfe:	50 3e       	cpi	r21, 0xE0	; 224
     e00:	68 f1       	brcs	.+90     	; 0xe5c <__addsf3x+0x98>
     e02:	1a 16       	cp	r1, r26
     e04:	f0 40       	sbci	r31, 0x00	; 0
     e06:	a2 2f       	mov	r26, r18
     e08:	23 2f       	mov	r18, r19
     e0a:	34 2f       	mov	r19, r20
     e0c:	44 27       	eor	r20, r20
     e0e:	58 5f       	subi	r21, 0xF8	; 248
     e10:	f3 cf       	rjmp	.-26     	; 0xdf8 <__addsf3x+0x34>
     e12:	46 95       	lsr	r20
     e14:	37 95       	ror	r19
     e16:	27 95       	ror	r18
     e18:	a7 95       	ror	r26
     e1a:	f0 40       	sbci	r31, 0x00	; 0
     e1c:	53 95       	inc	r21
     e1e:	c9 f7       	brne	.-14     	; 0xe12 <__addsf3x+0x4e>
     e20:	7e f4       	brtc	.+30     	; 0xe40 <__addsf3x+0x7c>
     e22:	1f 16       	cp	r1, r31
     e24:	ba 0b       	sbc	r27, r26
     e26:	62 0b       	sbc	r22, r18
     e28:	73 0b       	sbc	r23, r19
     e2a:	84 0b       	sbc	r24, r20
     e2c:	ba f0       	brmi	.+46     	; 0xe5c <__addsf3x+0x98>
     e2e:	91 50       	subi	r25, 0x01	; 1
     e30:	a1 f0       	breq	.+40     	; 0xe5a <__addsf3x+0x96>
     e32:	ff 0f       	add	r31, r31
     e34:	bb 1f       	adc	r27, r27
     e36:	66 1f       	adc	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	88 1f       	adc	r24, r24
     e3c:	c2 f7       	brpl	.-16     	; 0xe2e <__addsf3x+0x6a>
     e3e:	0e c0       	rjmp	.+28     	; 0xe5c <__addsf3x+0x98>
     e40:	ba 0f       	add	r27, r26
     e42:	62 1f       	adc	r22, r18
     e44:	73 1f       	adc	r23, r19
     e46:	84 1f       	adc	r24, r20
     e48:	48 f4       	brcc	.+18     	; 0xe5c <__addsf3x+0x98>
     e4a:	87 95       	ror	r24
     e4c:	77 95       	ror	r23
     e4e:	67 95       	ror	r22
     e50:	b7 95       	ror	r27
     e52:	f7 95       	ror	r31
     e54:	9e 3f       	cpi	r25, 0xFE	; 254
     e56:	08 f0       	brcs	.+2      	; 0xe5a <__addsf3x+0x96>
     e58:	b3 cf       	rjmp	.-154    	; 0xdc0 <__addsf3+0x1e>
     e5a:	93 95       	inc	r25
     e5c:	88 0f       	add	r24, r24
     e5e:	08 f0       	brcs	.+2      	; 0xe62 <__addsf3x+0x9e>
     e60:	99 27       	eor	r25, r25
     e62:	ee 0f       	add	r30, r30
     e64:	97 95       	ror	r25
     e66:	87 95       	ror	r24
     e68:	08 95       	ret

00000e6a <__divsf3>:
     e6a:	0c d0       	rcall	.+24     	; 0xe84 <__divsf3x>
     e6c:	eb c0       	rjmp	.+470    	; 0x1044 <__fp_round>
     e6e:	e3 d0       	rcall	.+454    	; 0x1036 <__fp_pscB>
     e70:	40 f0       	brcs	.+16     	; 0xe82 <__divsf3+0x18>
     e72:	da d0       	rcall	.+436    	; 0x1028 <__fp_pscA>
     e74:	30 f0       	brcs	.+12     	; 0xe82 <__divsf3+0x18>
     e76:	21 f4       	brne	.+8      	; 0xe80 <__divsf3+0x16>
     e78:	5f 3f       	cpi	r21, 0xFF	; 255
     e7a:	19 f0       	breq	.+6      	; 0xe82 <__divsf3+0x18>
     e7c:	cc c0       	rjmp	.+408    	; 0x1016 <__fp_inf>
     e7e:	51 11       	cpse	r21, r1
     e80:	15 c1       	rjmp	.+554    	; 0x10ac <__fp_szero>
     e82:	cf c0       	rjmp	.+414    	; 0x1022 <__fp_nan>

00000e84 <__divsf3x>:
     e84:	f0 d0       	rcall	.+480    	; 0x1066 <__fp_split3>
     e86:	98 f3       	brcs	.-26     	; 0xe6e <__divsf3+0x4>

00000e88 <__divsf3_pse>:
     e88:	99 23       	and	r25, r25
     e8a:	c9 f3       	breq	.-14     	; 0xe7e <__divsf3+0x14>
     e8c:	55 23       	and	r21, r21
     e8e:	b1 f3       	breq	.-20     	; 0xe7c <__divsf3+0x12>
     e90:	95 1b       	sub	r25, r21
     e92:	55 0b       	sbc	r21, r21
     e94:	bb 27       	eor	r27, r27
     e96:	aa 27       	eor	r26, r26
     e98:	62 17       	cp	r22, r18
     e9a:	73 07       	cpc	r23, r19
     e9c:	84 07       	cpc	r24, r20
     e9e:	38 f0       	brcs	.+14     	; 0xeae <__divsf3_pse+0x26>
     ea0:	9f 5f       	subi	r25, 0xFF	; 255
     ea2:	5f 4f       	sbci	r21, 0xFF	; 255
     ea4:	22 0f       	add	r18, r18
     ea6:	33 1f       	adc	r19, r19
     ea8:	44 1f       	adc	r20, r20
     eaa:	aa 1f       	adc	r26, r26
     eac:	a9 f3       	breq	.-22     	; 0xe98 <__divsf3_pse+0x10>
     eae:	33 d0       	rcall	.+102    	; 0xf16 <__divsf3_pse+0x8e>
     eb0:	0e 2e       	mov	r0, r30
     eb2:	3a f0       	brmi	.+14     	; 0xec2 <__divsf3_pse+0x3a>
     eb4:	e0 e8       	ldi	r30, 0x80	; 128
     eb6:	30 d0       	rcall	.+96     	; 0xf18 <__divsf3_pse+0x90>
     eb8:	91 50       	subi	r25, 0x01	; 1
     eba:	50 40       	sbci	r21, 0x00	; 0
     ebc:	e6 95       	lsr	r30
     ebe:	00 1c       	adc	r0, r0
     ec0:	ca f7       	brpl	.-14     	; 0xeb4 <__divsf3_pse+0x2c>
     ec2:	29 d0       	rcall	.+82     	; 0xf16 <__divsf3_pse+0x8e>
     ec4:	fe 2f       	mov	r31, r30
     ec6:	27 d0       	rcall	.+78     	; 0xf16 <__divsf3_pse+0x8e>
     ec8:	66 0f       	add	r22, r22
     eca:	77 1f       	adc	r23, r23
     ecc:	88 1f       	adc	r24, r24
     ece:	bb 1f       	adc	r27, r27
     ed0:	26 17       	cp	r18, r22
     ed2:	37 07       	cpc	r19, r23
     ed4:	48 07       	cpc	r20, r24
     ed6:	ab 07       	cpc	r26, r27
     ed8:	b0 e8       	ldi	r27, 0x80	; 128
     eda:	09 f0       	breq	.+2      	; 0xede <__divsf3_pse+0x56>
     edc:	bb 0b       	sbc	r27, r27
     ede:	80 2d       	mov	r24, r0
     ee0:	bf 01       	movw	r22, r30
     ee2:	ff 27       	eor	r31, r31
     ee4:	93 58       	subi	r25, 0x83	; 131
     ee6:	5f 4f       	sbci	r21, 0xFF	; 255
     ee8:	2a f0       	brmi	.+10     	; 0xef4 <__divsf3_pse+0x6c>
     eea:	9e 3f       	cpi	r25, 0xFE	; 254
     eec:	51 05       	cpc	r21, r1
     eee:	68 f0       	brcs	.+26     	; 0xf0a <__divsf3_pse+0x82>
     ef0:	92 c0       	rjmp	.+292    	; 0x1016 <__fp_inf>
     ef2:	dc c0       	rjmp	.+440    	; 0x10ac <__fp_szero>
     ef4:	5f 3f       	cpi	r21, 0xFF	; 255
     ef6:	ec f3       	brlt	.-6      	; 0xef2 <__divsf3_pse+0x6a>
     ef8:	98 3e       	cpi	r25, 0xE8	; 232
     efa:	dc f3       	brlt	.-10     	; 0xef2 <__divsf3_pse+0x6a>
     efc:	86 95       	lsr	r24
     efe:	77 95       	ror	r23
     f00:	67 95       	ror	r22
     f02:	b7 95       	ror	r27
     f04:	f7 95       	ror	r31
     f06:	9f 5f       	subi	r25, 0xFF	; 255
     f08:	c9 f7       	brne	.-14     	; 0xefc <__divsf3_pse+0x74>
     f0a:	88 0f       	add	r24, r24
     f0c:	91 1d       	adc	r25, r1
     f0e:	96 95       	lsr	r25
     f10:	87 95       	ror	r24
     f12:	97 f9       	bld	r25, 7
     f14:	08 95       	ret
     f16:	e1 e0       	ldi	r30, 0x01	; 1
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	88 1f       	adc	r24, r24
     f1e:	bb 1f       	adc	r27, r27
     f20:	62 17       	cp	r22, r18
     f22:	73 07       	cpc	r23, r19
     f24:	84 07       	cpc	r24, r20
     f26:	ba 07       	cpc	r27, r26
     f28:	20 f0       	brcs	.+8      	; 0xf32 <__divsf3_pse+0xaa>
     f2a:	62 1b       	sub	r22, r18
     f2c:	73 0b       	sbc	r23, r19
     f2e:	84 0b       	sbc	r24, r20
     f30:	ba 0b       	sbc	r27, r26
     f32:	ee 1f       	adc	r30, r30
     f34:	88 f7       	brcc	.-30     	; 0xf18 <__divsf3_pse+0x90>
     f36:	e0 95       	com	r30
     f38:	08 95       	ret

00000f3a <__fixsfsi>:
     f3a:	04 d0       	rcall	.+8      	; 0xf44 <__fixunssfsi>
     f3c:	68 94       	set
     f3e:	b1 11       	cpse	r27, r1
     f40:	b5 c0       	rjmp	.+362    	; 0x10ac <__fp_szero>
     f42:	08 95       	ret

00000f44 <__fixunssfsi>:
     f44:	98 d0       	rcall	.+304    	; 0x1076 <__fp_splitA>
     f46:	88 f0       	brcs	.+34     	; 0xf6a <__fixunssfsi+0x26>
     f48:	9f 57       	subi	r25, 0x7F	; 127
     f4a:	90 f0       	brcs	.+36     	; 0xf70 <__fixunssfsi+0x2c>
     f4c:	b9 2f       	mov	r27, r25
     f4e:	99 27       	eor	r25, r25
     f50:	b7 51       	subi	r27, 0x17	; 23
     f52:	a0 f0       	brcs	.+40     	; 0xf7c <__fixunssfsi+0x38>
     f54:	d1 f0       	breq	.+52     	; 0xf8a <__fixunssfsi+0x46>
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	88 1f       	adc	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	1a f0       	brmi	.+6      	; 0xf66 <__fixunssfsi+0x22>
     f60:	ba 95       	dec	r27
     f62:	c9 f7       	brne	.-14     	; 0xf56 <__fixunssfsi+0x12>
     f64:	12 c0       	rjmp	.+36     	; 0xf8a <__fixunssfsi+0x46>
     f66:	b1 30       	cpi	r27, 0x01	; 1
     f68:	81 f0       	breq	.+32     	; 0xf8a <__fixunssfsi+0x46>
     f6a:	9f d0       	rcall	.+318    	; 0x10aa <__fp_zero>
     f6c:	b1 e0       	ldi	r27, 0x01	; 1
     f6e:	08 95       	ret
     f70:	9c c0       	rjmp	.+312    	; 0x10aa <__fp_zero>
     f72:	67 2f       	mov	r22, r23
     f74:	78 2f       	mov	r23, r24
     f76:	88 27       	eor	r24, r24
     f78:	b8 5f       	subi	r27, 0xF8	; 248
     f7a:	39 f0       	breq	.+14     	; 0xf8a <__fixunssfsi+0x46>
     f7c:	b9 3f       	cpi	r27, 0xF9	; 249
     f7e:	cc f3       	brlt	.-14     	; 0xf72 <__fixunssfsi+0x2e>
     f80:	86 95       	lsr	r24
     f82:	77 95       	ror	r23
     f84:	67 95       	ror	r22
     f86:	b3 95       	inc	r27
     f88:	d9 f7       	brne	.-10     	; 0xf80 <__fixunssfsi+0x3c>
     f8a:	3e f4       	brtc	.+14     	; 0xf9a <__fixunssfsi+0x56>
     f8c:	90 95       	com	r25
     f8e:	80 95       	com	r24
     f90:	70 95       	com	r23
     f92:	61 95       	neg	r22
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	08 95       	ret

00000f9c <__floatunsisf>:
     f9c:	e8 94       	clt
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <__floatsisf+0x12>

00000fa0 <__floatsisf>:
     fa0:	97 fb       	bst	r25, 7
     fa2:	3e f4       	brtc	.+14     	; 0xfb2 <__floatsisf+0x12>
     fa4:	90 95       	com	r25
     fa6:	80 95       	com	r24
     fa8:	70 95       	com	r23
     faa:	61 95       	neg	r22
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8f 4f       	sbci	r24, 0xFF	; 255
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	99 23       	and	r25, r25
     fb4:	a9 f0       	breq	.+42     	; 0xfe0 <__floatsisf+0x40>
     fb6:	f9 2f       	mov	r31, r25
     fb8:	96 e9       	ldi	r25, 0x96	; 150
     fba:	bb 27       	eor	r27, r27
     fbc:	93 95       	inc	r25
     fbe:	f6 95       	lsr	r31
     fc0:	87 95       	ror	r24
     fc2:	77 95       	ror	r23
     fc4:	67 95       	ror	r22
     fc6:	b7 95       	ror	r27
     fc8:	f1 11       	cpse	r31, r1
     fca:	f8 cf       	rjmp	.-16     	; 0xfbc <__floatsisf+0x1c>
     fcc:	fa f4       	brpl	.+62     	; 0x100c <__floatsisf+0x6c>
     fce:	bb 0f       	add	r27, r27
     fd0:	11 f4       	brne	.+4      	; 0xfd6 <__floatsisf+0x36>
     fd2:	60 ff       	sbrs	r22, 0
     fd4:	1b c0       	rjmp	.+54     	; 0x100c <__floatsisf+0x6c>
     fd6:	6f 5f       	subi	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	16 c0       	rjmp	.+44     	; 0x100c <__floatsisf+0x6c>
     fe0:	88 23       	and	r24, r24
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <__floatsisf+0x48>
     fe4:	96 e9       	ldi	r25, 0x96	; 150
     fe6:	11 c0       	rjmp	.+34     	; 0x100a <__floatsisf+0x6a>
     fe8:	77 23       	and	r23, r23
     fea:	21 f0       	breq	.+8      	; 0xff4 <__floatsisf+0x54>
     fec:	9e e8       	ldi	r25, 0x8E	; 142
     fee:	87 2f       	mov	r24, r23
     ff0:	76 2f       	mov	r23, r22
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <__floatsisf+0x5e>
     ff4:	66 23       	and	r22, r22
     ff6:	71 f0       	breq	.+28     	; 0x1014 <__floatsisf+0x74>
     ff8:	96 e8       	ldi	r25, 0x86	; 134
     ffa:	86 2f       	mov	r24, r22
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	2a f0       	brmi	.+10     	; 0x100c <__floatsisf+0x6c>
    1002:	9a 95       	dec	r25
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	88 1f       	adc	r24, r24
    100a:	da f7       	brpl	.-10     	; 0x1002 <__floatsisf+0x62>
    100c:	88 0f       	add	r24, r24
    100e:	96 95       	lsr	r25
    1010:	87 95       	ror	r24
    1012:	97 f9       	bld	r25, 7
    1014:	08 95       	ret

00001016 <__fp_inf>:
    1016:	97 f9       	bld	r25, 7
    1018:	9f 67       	ori	r25, 0x7F	; 127
    101a:	80 e8       	ldi	r24, 0x80	; 128
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	08 95       	ret

00001022 <__fp_nan>:
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	80 ec       	ldi	r24, 0xC0	; 192
    1026:	08 95       	ret

00001028 <__fp_pscA>:
    1028:	00 24       	eor	r0, r0
    102a:	0a 94       	dec	r0
    102c:	16 16       	cp	r1, r22
    102e:	17 06       	cpc	r1, r23
    1030:	18 06       	cpc	r1, r24
    1032:	09 06       	cpc	r0, r25
    1034:	08 95       	ret

00001036 <__fp_pscB>:
    1036:	00 24       	eor	r0, r0
    1038:	0a 94       	dec	r0
    103a:	12 16       	cp	r1, r18
    103c:	13 06       	cpc	r1, r19
    103e:	14 06       	cpc	r1, r20
    1040:	05 06       	cpc	r0, r21
    1042:	08 95       	ret

00001044 <__fp_round>:
    1044:	09 2e       	mov	r0, r25
    1046:	03 94       	inc	r0
    1048:	00 0c       	add	r0, r0
    104a:	11 f4       	brne	.+4      	; 0x1050 <__fp_round+0xc>
    104c:	88 23       	and	r24, r24
    104e:	52 f0       	brmi	.+20     	; 0x1064 <__fp_round+0x20>
    1050:	bb 0f       	add	r27, r27
    1052:	40 f4       	brcc	.+16     	; 0x1064 <__fp_round+0x20>
    1054:	bf 2b       	or	r27, r31
    1056:	11 f4       	brne	.+4      	; 0x105c <__fp_round+0x18>
    1058:	60 ff       	sbrs	r22, 0
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <__fp_round+0x20>
    105c:	6f 5f       	subi	r22, 0xFF	; 255
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	8f 4f       	sbci	r24, 0xFF	; 255
    1062:	9f 4f       	sbci	r25, 0xFF	; 255
    1064:	08 95       	ret

00001066 <__fp_split3>:
    1066:	57 fd       	sbrc	r21, 7
    1068:	90 58       	subi	r25, 0x80	; 128
    106a:	44 0f       	add	r20, r20
    106c:	55 1f       	adc	r21, r21
    106e:	59 f0       	breq	.+22     	; 0x1086 <__fp_splitA+0x10>
    1070:	5f 3f       	cpi	r21, 0xFF	; 255
    1072:	71 f0       	breq	.+28     	; 0x1090 <__fp_splitA+0x1a>
    1074:	47 95       	ror	r20

00001076 <__fp_splitA>:
    1076:	88 0f       	add	r24, r24
    1078:	97 fb       	bst	r25, 7
    107a:	99 1f       	adc	r25, r25
    107c:	61 f0       	breq	.+24     	; 0x1096 <__fp_splitA+0x20>
    107e:	9f 3f       	cpi	r25, 0xFF	; 255
    1080:	79 f0       	breq	.+30     	; 0x10a0 <__fp_splitA+0x2a>
    1082:	87 95       	ror	r24
    1084:	08 95       	ret
    1086:	12 16       	cp	r1, r18
    1088:	13 06       	cpc	r1, r19
    108a:	14 06       	cpc	r1, r20
    108c:	55 1f       	adc	r21, r21
    108e:	f2 cf       	rjmp	.-28     	; 0x1074 <__fp_split3+0xe>
    1090:	46 95       	lsr	r20
    1092:	f1 df       	rcall	.-30     	; 0x1076 <__fp_splitA>
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <__fp_splitA+0x30>
    1096:	16 16       	cp	r1, r22
    1098:	17 06       	cpc	r1, r23
    109a:	18 06       	cpc	r1, r24
    109c:	99 1f       	adc	r25, r25
    109e:	f1 cf       	rjmp	.-30     	; 0x1082 <__fp_splitA+0xc>
    10a0:	86 95       	lsr	r24
    10a2:	71 05       	cpc	r23, r1
    10a4:	61 05       	cpc	r22, r1
    10a6:	08 94       	sec
    10a8:	08 95       	ret

000010aa <__fp_zero>:
    10aa:	e8 94       	clt

000010ac <__fp_szero>:
    10ac:	bb 27       	eor	r27, r27
    10ae:	66 27       	eor	r22, r22
    10b0:	77 27       	eor	r23, r23
    10b2:	cb 01       	movw	r24, r22
    10b4:	97 f9       	bld	r25, 7
    10b6:	08 95       	ret

000010b8 <__udivmodsi4>:
    10b8:	a1 e2       	ldi	r26, 0x21	; 33
    10ba:	1a 2e       	mov	r1, r26
    10bc:	aa 1b       	sub	r26, r26
    10be:	bb 1b       	sub	r27, r27
    10c0:	fd 01       	movw	r30, r26
    10c2:	0d c0       	rjmp	.+26     	; 0x10de <__udivmodsi4_ep>

000010c4 <__udivmodsi4_loop>:
    10c4:	aa 1f       	adc	r26, r26
    10c6:	bb 1f       	adc	r27, r27
    10c8:	ee 1f       	adc	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	a2 17       	cp	r26, r18
    10ce:	b3 07       	cpc	r27, r19
    10d0:	e4 07       	cpc	r30, r20
    10d2:	f5 07       	cpc	r31, r21
    10d4:	20 f0       	brcs	.+8      	; 0x10de <__udivmodsi4_ep>
    10d6:	a2 1b       	sub	r26, r18
    10d8:	b3 0b       	sbc	r27, r19
    10da:	e4 0b       	sbc	r30, r20
    10dc:	f5 0b       	sbc	r31, r21

000010de <__udivmodsi4_ep>:
    10de:	66 1f       	adc	r22, r22
    10e0:	77 1f       	adc	r23, r23
    10e2:	88 1f       	adc	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	1a 94       	dec	r1
    10e8:	69 f7       	brne	.-38     	; 0x10c4 <__udivmodsi4_loop>
    10ea:	60 95       	com	r22
    10ec:	70 95       	com	r23
    10ee:	80 95       	com	r24
    10f0:	90 95       	com	r25
    10f2:	9b 01       	movw	r18, r22
    10f4:	ac 01       	movw	r20, r24
    10f6:	bd 01       	movw	r22, r26
    10f8:	cf 01       	movw	r24, r30
    10fa:	08 95       	ret

000010fc <dtostrf>:
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	f2 2f       	mov	r31, r18
    1106:	f0 2e       	mov	r15, r16
    1108:	47 fd       	sbrc	r20, 7
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <dtostrf+0x14>
    110c:	e4 e0       	ldi	r30, 0x04	; 4
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <dtostrf+0x16>
    1110:	e4 e1       	ldi	r30, 0x14	; 20
    1112:	24 2f       	mov	r18, r20
    1114:	33 27       	eor	r19, r19
    1116:	27 fd       	sbrc	r18, 7
    1118:	30 95       	com	r19
    111a:	37 ff       	sbrs	r19, 7
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <dtostrf+0x28>
    111e:	30 95       	com	r19
    1120:	21 95       	neg	r18
    1122:	3f 4f       	sbci	r19, 0xFF	; 255
    1124:	4f 2d       	mov	r20, r15
    1126:	51 2f       	mov	r21, r17
    1128:	0f 2f       	mov	r16, r31
    112a:	ee 2e       	mov	r14, r30
    112c:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <dtoa_prf>
    1130:	8f 2d       	mov	r24, r15
    1132:	91 2f       	mov	r25, r17
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	08 95       	ret

0000113e <atof>:
    113e:	66 27       	eor	r22, r22
    1140:	77 27       	eor	r23, r23
    1142:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <strtod>

00001146 <memcpy>:
    1146:	fb 01       	movw	r30, r22
    1148:	dc 01       	movw	r26, r24
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <memcpy+0xa>
    114c:	01 90       	ld	r0, Z+
    114e:	0d 92       	st	X+, r0
    1150:	41 50       	subi	r20, 0x01	; 1
    1152:	50 40       	sbci	r21, 0x00	; 0
    1154:	d8 f7       	brcc	.-10     	; 0x114c <memcpy+0x6>
    1156:	08 95       	ret

00001158 <memset>:
    1158:	dc 01       	movw	r26, r24
    115a:	01 c0       	rjmp	.+2      	; 0x115e <memset+0x6>
    115c:	6d 93       	st	X+, r22
    115e:	41 50       	subi	r20, 0x01	; 1
    1160:	50 40       	sbci	r21, 0x00	; 0
    1162:	e0 f7       	brcc	.-8      	; 0x115c <memset+0x4>
    1164:	08 95       	ret

00001166 <strncmp>:
    1166:	fb 01       	movw	r30, r22
    1168:	dc 01       	movw	r26, r24
    116a:	41 50       	subi	r20, 0x01	; 1
    116c:	50 40       	sbci	r21, 0x00	; 0
    116e:	30 f0       	brcs	.+12     	; 0x117c <strncmp+0x16>
    1170:	8d 91       	ld	r24, X+
    1172:	01 90       	ld	r0, Z+
    1174:	80 19       	sub	r24, r0
    1176:	19 f4       	brne	.+6      	; 0x117e <strncmp+0x18>
    1178:	00 20       	and	r0, r0
    117a:	b9 f7       	brne	.-18     	; 0x116a <strncmp+0x4>
    117c:	88 1b       	sub	r24, r24
    117e:	99 0b       	sbc	r25, r25
    1180:	08 95       	ret

00001182 <strncpy>:
    1182:	fb 01       	movw	r30, r22
    1184:	dc 01       	movw	r26, r24
    1186:	41 50       	subi	r20, 0x01	; 1
    1188:	50 40       	sbci	r21, 0x00	; 0
    118a:	48 f0       	brcs	.+18     	; 0x119e <strncpy+0x1c>
    118c:	01 90       	ld	r0, Z+
    118e:	0d 92       	st	X+, r0
    1190:	00 20       	and	r0, r0
    1192:	c9 f7       	brne	.-14     	; 0x1186 <strncpy+0x4>
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <strncpy+0x16>
    1196:	1d 92       	st	X+, r1
    1198:	41 50       	subi	r20, 0x01	; 1
    119a:	50 40       	sbci	r21, 0x00	; 0
    119c:	e0 f7       	brcc	.-8      	; 0x1196 <strncpy+0x14>
    119e:	08 95       	ret

000011a0 <strstr>:
    11a0:	fb 01       	movw	r30, r22
    11a2:	51 91       	ld	r21, Z+
    11a4:	55 23       	and	r21, r21
    11a6:	a9 f0       	breq	.+42     	; 0x11d2 <strstr+0x32>
    11a8:	bf 01       	movw	r22, r30
    11aa:	dc 01       	movw	r26, r24
    11ac:	4d 91       	ld	r20, X+
    11ae:	45 17       	cp	r20, r21
    11b0:	41 11       	cpse	r20, r1
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <strstr+0xc>
    11b4:	59 f4       	brne	.+22     	; 0x11cc <strstr+0x2c>
    11b6:	cd 01       	movw	r24, r26
    11b8:	01 90       	ld	r0, Z+
    11ba:	00 20       	and	r0, r0
    11bc:	49 f0       	breq	.+18     	; 0x11d0 <strstr+0x30>
    11be:	4d 91       	ld	r20, X+
    11c0:	40 15       	cp	r20, r0
    11c2:	41 11       	cpse	r20, r1
    11c4:	c9 f3       	breq	.-14     	; 0x11b8 <strstr+0x18>
    11c6:	fb 01       	movw	r30, r22
    11c8:	41 11       	cpse	r20, r1
    11ca:	ef cf       	rjmp	.-34     	; 0x11aa <strstr+0xa>
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	08 95       	ret

000011d4 <sprintf>:
    11d4:	ae e0       	ldi	r26, 0x0E	; 14
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e0 ef       	ldi	r30, 0xF0	; 240
    11da:	f8 e0       	ldi	r31, 0x08	; 8
    11dc:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__prologue_saves__+0x1c>
    11e0:	0d 89       	ldd	r16, Y+21	; 0x15
    11e2:	1e 89       	ldd	r17, Y+22	; 0x16
    11e4:	86 e0       	ldi	r24, 0x06	; 6
    11e6:	8c 83       	std	Y+4, r24	; 0x04
    11e8:	1a 83       	std	Y+2, r17	; 0x02
    11ea:	09 83       	std	Y+1, r16	; 0x01
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	9f e7       	ldi	r25, 0x7F	; 127
    11f0:	9e 83       	std	Y+6, r25	; 0x06
    11f2:	8d 83       	std	Y+5, r24	; 0x05
    11f4:	9e 01       	movw	r18, r28
    11f6:	27 5e       	subi	r18, 0xE7	; 231
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	ce 01       	movw	r24, r28
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	6f 89       	ldd	r22, Y+23	; 0x17
    1200:	78 8d       	ldd	r23, Y+24	; 0x18
    1202:	a9 01       	movw	r20, r18
    1204:	0e 94 0e 09 	call	0x121c	; 0x121c <vfprintf>
    1208:	2f 81       	ldd	r18, Y+7	; 0x07
    120a:	38 85       	ldd	r19, Y+8	; 0x08
    120c:	02 0f       	add	r16, r18
    120e:	13 1f       	adc	r17, r19
    1210:	f8 01       	movw	r30, r16
    1212:	10 82       	st	Z, r1
    1214:	2e 96       	adiw	r28, 0x0e	; 14
    1216:	e4 e0       	ldi	r30, 0x04	; 4
    1218:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__epilogue_restores__+0x1c>

0000121c <vfprintf>:
    121c:	ab e0       	ldi	r26, 0x0B	; 11
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e4 e1       	ldi	r30, 0x14	; 20
    1222:	f9 e0       	ldi	r31, 0x09	; 9
    1224:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__prologue_saves__>
    1228:	3c 01       	movw	r6, r24
    122a:	2b 01       	movw	r4, r22
    122c:	5a 01       	movw	r10, r20
    122e:	fc 01       	movw	r30, r24
    1230:	17 82       	std	Z+7, r1	; 0x07
    1232:	16 82       	std	Z+6, r1	; 0x06
    1234:	83 81       	ldd	r24, Z+3	; 0x03
    1236:	81 fd       	sbrc	r24, 1
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <vfprintf+0x24>
    123a:	6f ef       	ldi	r22, 0xFF	; 255
    123c:	7f ef       	ldi	r23, 0xFF	; 255
    123e:	c6 c1       	rjmp	.+908    	; 0x15cc <vfprintf+0x3b0>
    1240:	9a e0       	ldi	r25, 0x0A	; 10
    1242:	89 2e       	mov	r8, r25
    1244:	1e 01       	movw	r2, r28
    1246:	08 94       	sec
    1248:	21 1c       	adc	r2, r1
    124a:	31 1c       	adc	r3, r1
    124c:	f3 01       	movw	r30, r6
    124e:	23 81       	ldd	r18, Z+3	; 0x03
    1250:	f2 01       	movw	r30, r4
    1252:	23 fd       	sbrc	r18, 3
    1254:	85 91       	lpm	r24, Z+
    1256:	23 ff       	sbrs	r18, 3
    1258:	81 91       	ld	r24, Z+
    125a:	2f 01       	movw	r4, r30
    125c:	88 23       	and	r24, r24
    125e:	09 f4       	brne	.+2      	; 0x1262 <vfprintf+0x46>
    1260:	b2 c1       	rjmp	.+868    	; 0x15c6 <vfprintf+0x3aa>
    1262:	85 32       	cpi	r24, 0x25	; 37
    1264:	39 f4       	brne	.+14     	; 0x1274 <vfprintf+0x58>
    1266:	23 fd       	sbrc	r18, 3
    1268:	85 91       	lpm	r24, Z+
    126a:	23 ff       	sbrs	r18, 3
    126c:	81 91       	ld	r24, Z+
    126e:	2f 01       	movw	r4, r30
    1270:	85 32       	cpi	r24, 0x25	; 37
    1272:	29 f4       	brne	.+10     	; 0x127e <vfprintf+0x62>
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	b3 01       	movw	r22, r6
    1278:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    127c:	e7 cf       	rjmp	.-50     	; 0x124c <vfprintf+0x30>
    127e:	98 2f       	mov	r25, r24
    1280:	ff 24       	eor	r15, r15
    1282:	ee 24       	eor	r14, r14
    1284:	99 24       	eor	r9, r9
    1286:	ff e1       	ldi	r31, 0x1F	; 31
    1288:	ff 15       	cp	r31, r15
    128a:	d0 f0       	brcs	.+52     	; 0x12c0 <vfprintf+0xa4>
    128c:	9b 32       	cpi	r25, 0x2B	; 43
    128e:	69 f0       	breq	.+26     	; 0x12aa <vfprintf+0x8e>
    1290:	9c 32       	cpi	r25, 0x2C	; 44
    1292:	28 f4       	brcc	.+10     	; 0x129e <vfprintf+0x82>
    1294:	90 32       	cpi	r25, 0x20	; 32
    1296:	59 f0       	breq	.+22     	; 0x12ae <vfprintf+0x92>
    1298:	93 32       	cpi	r25, 0x23	; 35
    129a:	91 f4       	brne	.+36     	; 0x12c0 <vfprintf+0xa4>
    129c:	0e c0       	rjmp	.+28     	; 0x12ba <vfprintf+0x9e>
    129e:	9d 32       	cpi	r25, 0x2D	; 45
    12a0:	49 f0       	breq	.+18     	; 0x12b4 <vfprintf+0x98>
    12a2:	90 33       	cpi	r25, 0x30	; 48
    12a4:	69 f4       	brne	.+26     	; 0x12c0 <vfprintf+0xa4>
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	24 c0       	rjmp	.+72     	; 0x12f2 <vfprintf+0xd6>
    12aa:	52 e0       	ldi	r21, 0x02	; 2
    12ac:	f5 2a       	or	r15, r21
    12ae:	84 e0       	ldi	r24, 0x04	; 4
    12b0:	f8 2a       	or	r15, r24
    12b2:	28 c0       	rjmp	.+80     	; 0x1304 <vfprintf+0xe8>
    12b4:	98 e0       	ldi	r25, 0x08	; 8
    12b6:	f9 2a       	or	r15, r25
    12b8:	25 c0       	rjmp	.+74     	; 0x1304 <vfprintf+0xe8>
    12ba:	e0 e1       	ldi	r30, 0x10	; 16
    12bc:	fe 2a       	or	r15, r30
    12be:	22 c0       	rjmp	.+68     	; 0x1304 <vfprintf+0xe8>
    12c0:	f7 fc       	sbrc	r15, 7
    12c2:	29 c0       	rjmp	.+82     	; 0x1316 <vfprintf+0xfa>
    12c4:	89 2f       	mov	r24, r25
    12c6:	80 53       	subi	r24, 0x30	; 48
    12c8:	8a 30       	cpi	r24, 0x0A	; 10
    12ca:	70 f4       	brcc	.+28     	; 0x12e8 <vfprintf+0xcc>
    12cc:	f6 fe       	sbrs	r15, 6
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <vfprintf+0xbe>
    12d0:	98 9c       	mul	r9, r8
    12d2:	90 2c       	mov	r9, r0
    12d4:	11 24       	eor	r1, r1
    12d6:	98 0e       	add	r9, r24
    12d8:	15 c0       	rjmp	.+42     	; 0x1304 <vfprintf+0xe8>
    12da:	e8 9c       	mul	r14, r8
    12dc:	e0 2c       	mov	r14, r0
    12de:	11 24       	eor	r1, r1
    12e0:	e8 0e       	add	r14, r24
    12e2:	f0 e2       	ldi	r31, 0x20	; 32
    12e4:	ff 2a       	or	r15, r31
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <vfprintf+0xe8>
    12e8:	9e 32       	cpi	r25, 0x2E	; 46
    12ea:	29 f4       	brne	.+10     	; 0x12f6 <vfprintf+0xda>
    12ec:	f6 fc       	sbrc	r15, 6
    12ee:	6b c1       	rjmp	.+726    	; 0x15c6 <vfprintf+0x3aa>
    12f0:	40 e4       	ldi	r20, 0x40	; 64
    12f2:	f4 2a       	or	r15, r20
    12f4:	07 c0       	rjmp	.+14     	; 0x1304 <vfprintf+0xe8>
    12f6:	9c 36       	cpi	r25, 0x6C	; 108
    12f8:	19 f4       	brne	.+6      	; 0x1300 <vfprintf+0xe4>
    12fa:	50 e8       	ldi	r21, 0x80	; 128
    12fc:	f5 2a       	or	r15, r21
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <vfprintf+0xe8>
    1300:	98 36       	cpi	r25, 0x68	; 104
    1302:	49 f4       	brne	.+18     	; 0x1316 <vfprintf+0xfa>
    1304:	f2 01       	movw	r30, r4
    1306:	23 fd       	sbrc	r18, 3
    1308:	95 91       	lpm	r25, Z+
    130a:	23 ff       	sbrs	r18, 3
    130c:	91 91       	ld	r25, Z+
    130e:	2f 01       	movw	r4, r30
    1310:	99 23       	and	r25, r25
    1312:	09 f0       	breq	.+2      	; 0x1316 <vfprintf+0xfa>
    1314:	b8 cf       	rjmp	.-144    	; 0x1286 <vfprintf+0x6a>
    1316:	89 2f       	mov	r24, r25
    1318:	85 54       	subi	r24, 0x45	; 69
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	18 f0       	brcs	.+6      	; 0x1324 <vfprintf+0x108>
    131e:	80 52       	subi	r24, 0x20	; 32
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	38 f4       	brcc	.+14     	; 0x1332 <vfprintf+0x116>
    1324:	44 e0       	ldi	r20, 0x04	; 4
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	a4 0e       	add	r10, r20
    132a:	b5 1e       	adc	r11, r21
    132c:	5f e3       	ldi	r21, 0x3F	; 63
    132e:	59 83       	std	Y+1, r21	; 0x01
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <vfprintf+0x134>
    1332:	93 36       	cpi	r25, 0x63	; 99
    1334:	31 f0       	breq	.+12     	; 0x1342 <vfprintf+0x126>
    1336:	93 37       	cpi	r25, 0x73	; 115
    1338:	79 f0       	breq	.+30     	; 0x1358 <vfprintf+0x13c>
    133a:	93 35       	cpi	r25, 0x53	; 83
    133c:	09 f0       	breq	.+2      	; 0x1340 <vfprintf+0x124>
    133e:	56 c0       	rjmp	.+172    	; 0x13ec <vfprintf+0x1d0>
    1340:	20 c0       	rjmp	.+64     	; 0x1382 <vfprintf+0x166>
    1342:	f5 01       	movw	r30, r10
    1344:	80 81       	ld	r24, Z
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	42 e0       	ldi	r20, 0x02	; 2
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	a4 0e       	add	r10, r20
    134e:	b5 1e       	adc	r11, r21
    1350:	61 01       	movw	r12, r2
    1352:	01 e0       	ldi	r16, 0x01	; 1
    1354:	10 e0       	ldi	r17, 0x00	; 0
    1356:	12 c0       	rjmp	.+36     	; 0x137c <vfprintf+0x160>
    1358:	f5 01       	movw	r30, r10
    135a:	c0 80       	ld	r12, Z
    135c:	d1 80       	ldd	r13, Z+1	; 0x01
    135e:	f6 fc       	sbrc	r15, 6
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <vfprintf+0x14c>
    1362:	6f ef       	ldi	r22, 0xFF	; 255
    1364:	7f ef       	ldi	r23, 0xFF	; 255
    1366:	02 c0       	rjmp	.+4      	; 0x136c <vfprintf+0x150>
    1368:	69 2d       	mov	r22, r9
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	42 e0       	ldi	r20, 0x02	; 2
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	a4 0e       	add	r10, r20
    1372:	b5 1e       	adc	r11, r21
    1374:	c6 01       	movw	r24, r12
    1376:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <strnlen>
    137a:	8c 01       	movw	r16, r24
    137c:	5f e7       	ldi	r21, 0x7F	; 127
    137e:	f5 22       	and	r15, r21
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <vfprintf+0x18e>
    1382:	f5 01       	movw	r30, r10
    1384:	c0 80       	ld	r12, Z
    1386:	d1 80       	ldd	r13, Z+1	; 0x01
    1388:	f6 fc       	sbrc	r15, 6
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <vfprintf+0x176>
    138c:	6f ef       	ldi	r22, 0xFF	; 255
    138e:	7f ef       	ldi	r23, 0xFF	; 255
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <vfprintf+0x17a>
    1392:	69 2d       	mov	r22, r9
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	42 e0       	ldi	r20, 0x02	; 2
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	a4 0e       	add	r10, r20
    139c:	b5 1e       	adc	r11, r21
    139e:	c6 01       	movw	r24, r12
    13a0:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <strnlen_P>
    13a4:	8c 01       	movw	r16, r24
    13a6:	50 e8       	ldi	r21, 0x80	; 128
    13a8:	f5 2a       	or	r15, r21
    13aa:	f3 fe       	sbrs	r15, 3
    13ac:	07 c0       	rjmp	.+14     	; 0x13bc <vfprintf+0x1a0>
    13ae:	1a c0       	rjmp	.+52     	; 0x13e4 <vfprintf+0x1c8>
    13b0:	80 e2       	ldi	r24, 0x20	; 32
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	b3 01       	movw	r22, r6
    13b6:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    13ba:	ea 94       	dec	r14
    13bc:	8e 2d       	mov	r24, r14
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	08 17       	cp	r16, r24
    13c2:	19 07       	cpc	r17, r25
    13c4:	a8 f3       	brcs	.-22     	; 0x13b0 <vfprintf+0x194>
    13c6:	0e c0       	rjmp	.+28     	; 0x13e4 <vfprintf+0x1c8>
    13c8:	f6 01       	movw	r30, r12
    13ca:	f7 fc       	sbrc	r15, 7
    13cc:	85 91       	lpm	r24, Z+
    13ce:	f7 fe       	sbrs	r15, 7
    13d0:	81 91       	ld	r24, Z+
    13d2:	6f 01       	movw	r12, r30
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	b3 01       	movw	r22, r6
    13d8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    13dc:	e1 10       	cpse	r14, r1
    13de:	ea 94       	dec	r14
    13e0:	01 50       	subi	r16, 0x01	; 1
    13e2:	10 40       	sbci	r17, 0x00	; 0
    13e4:	01 15       	cp	r16, r1
    13e6:	11 05       	cpc	r17, r1
    13e8:	79 f7       	brne	.-34     	; 0x13c8 <vfprintf+0x1ac>
    13ea:	ea c0       	rjmp	.+468    	; 0x15c0 <vfprintf+0x3a4>
    13ec:	94 36       	cpi	r25, 0x64	; 100
    13ee:	11 f0       	breq	.+4      	; 0x13f4 <vfprintf+0x1d8>
    13f0:	99 36       	cpi	r25, 0x69	; 105
    13f2:	69 f5       	brne	.+90     	; 0x144e <vfprintf+0x232>
    13f4:	f7 fe       	sbrs	r15, 7
    13f6:	08 c0       	rjmp	.+16     	; 0x1408 <vfprintf+0x1ec>
    13f8:	f5 01       	movw	r30, r10
    13fa:	20 81       	ld	r18, Z
    13fc:	31 81       	ldd	r19, Z+1	; 0x01
    13fe:	42 81       	ldd	r20, Z+2	; 0x02
    1400:	53 81       	ldd	r21, Z+3	; 0x03
    1402:	84 e0       	ldi	r24, 0x04	; 4
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0a c0       	rjmp	.+20     	; 0x141c <vfprintf+0x200>
    1408:	f5 01       	movw	r30, r10
    140a:	80 81       	ld	r24, Z
    140c:	91 81       	ldd	r25, Z+1	; 0x01
    140e:	9c 01       	movw	r18, r24
    1410:	44 27       	eor	r20, r20
    1412:	37 fd       	sbrc	r19, 7
    1414:	40 95       	com	r20
    1416:	54 2f       	mov	r21, r20
    1418:	82 e0       	ldi	r24, 0x02	; 2
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	a8 0e       	add	r10, r24
    141e:	b9 1e       	adc	r11, r25
    1420:	9f e6       	ldi	r25, 0x6F	; 111
    1422:	f9 22       	and	r15, r25
    1424:	57 ff       	sbrs	r21, 7
    1426:	09 c0       	rjmp	.+18     	; 0x143a <vfprintf+0x21e>
    1428:	50 95       	com	r21
    142a:	40 95       	com	r20
    142c:	30 95       	com	r19
    142e:	21 95       	neg	r18
    1430:	3f 4f       	sbci	r19, 0xFF	; 255
    1432:	4f 4f       	sbci	r20, 0xFF	; 255
    1434:	5f 4f       	sbci	r21, 0xFF	; 255
    1436:	e0 e8       	ldi	r30, 0x80	; 128
    1438:	fe 2a       	or	r15, r30
    143a:	ca 01       	movw	r24, r20
    143c:	b9 01       	movw	r22, r18
    143e:	a1 01       	movw	r20, r2
    1440:	2a e0       	ldi	r18, 0x0A	; 10
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__ultoa_invert>
    1448:	d8 2e       	mov	r13, r24
    144a:	d2 18       	sub	r13, r2
    144c:	40 c0       	rjmp	.+128    	; 0x14ce <vfprintf+0x2b2>
    144e:	95 37       	cpi	r25, 0x75	; 117
    1450:	29 f4       	brne	.+10     	; 0x145c <vfprintf+0x240>
    1452:	1f 2d       	mov	r17, r15
    1454:	1f 7e       	andi	r17, 0xEF	; 239
    1456:	2a e0       	ldi	r18, 0x0A	; 10
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	1d c0       	rjmp	.+58     	; 0x1496 <vfprintf+0x27a>
    145c:	1f 2d       	mov	r17, r15
    145e:	19 7f       	andi	r17, 0xF9	; 249
    1460:	9f 36       	cpi	r25, 0x6F	; 111
    1462:	61 f0       	breq	.+24     	; 0x147c <vfprintf+0x260>
    1464:	90 37       	cpi	r25, 0x70	; 112
    1466:	20 f4       	brcc	.+8      	; 0x1470 <vfprintf+0x254>
    1468:	98 35       	cpi	r25, 0x58	; 88
    146a:	09 f0       	breq	.+2      	; 0x146e <vfprintf+0x252>
    146c:	ac c0       	rjmp	.+344    	; 0x15c6 <vfprintf+0x3aa>
    146e:	0f c0       	rjmp	.+30     	; 0x148e <vfprintf+0x272>
    1470:	90 37       	cpi	r25, 0x70	; 112
    1472:	39 f0       	breq	.+14     	; 0x1482 <vfprintf+0x266>
    1474:	98 37       	cpi	r25, 0x78	; 120
    1476:	09 f0       	breq	.+2      	; 0x147a <vfprintf+0x25e>
    1478:	a6 c0       	rjmp	.+332    	; 0x15c6 <vfprintf+0x3aa>
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <vfprintf+0x268>
    147c:	28 e0       	ldi	r18, 0x08	; 8
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	0a c0       	rjmp	.+20     	; 0x1496 <vfprintf+0x27a>
    1482:	10 61       	ori	r17, 0x10	; 16
    1484:	14 fd       	sbrc	r17, 4
    1486:	14 60       	ori	r17, 0x04	; 4
    1488:	20 e1       	ldi	r18, 0x10	; 16
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	04 c0       	rjmp	.+8      	; 0x1496 <vfprintf+0x27a>
    148e:	14 fd       	sbrc	r17, 4
    1490:	16 60       	ori	r17, 0x06	; 6
    1492:	20 e1       	ldi	r18, 0x10	; 16
    1494:	32 e0       	ldi	r19, 0x02	; 2
    1496:	17 ff       	sbrs	r17, 7
    1498:	08 c0       	rjmp	.+16     	; 0x14aa <vfprintf+0x28e>
    149a:	f5 01       	movw	r30, r10
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	44 e0       	ldi	r20, 0x04	; 4
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	08 c0       	rjmp	.+16     	; 0x14ba <vfprintf+0x29e>
    14aa:	f5 01       	movw	r30, r10
    14ac:	80 81       	ld	r24, Z
    14ae:	91 81       	ldd	r25, Z+1	; 0x01
    14b0:	bc 01       	movw	r22, r24
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	42 e0       	ldi	r20, 0x02	; 2
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	a4 0e       	add	r10, r20
    14bc:	b5 1e       	adc	r11, r21
    14be:	a1 01       	movw	r20, r2
    14c0:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__ultoa_invert>
    14c4:	d8 2e       	mov	r13, r24
    14c6:	d2 18       	sub	r13, r2
    14c8:	8f e7       	ldi	r24, 0x7F	; 127
    14ca:	f8 2e       	mov	r15, r24
    14cc:	f1 22       	and	r15, r17
    14ce:	f6 fe       	sbrs	r15, 6
    14d0:	0b c0       	rjmp	.+22     	; 0x14e8 <vfprintf+0x2cc>
    14d2:	5e ef       	ldi	r21, 0xFE	; 254
    14d4:	f5 22       	and	r15, r21
    14d6:	d9 14       	cp	r13, r9
    14d8:	38 f4       	brcc	.+14     	; 0x14e8 <vfprintf+0x2cc>
    14da:	f4 fe       	sbrs	r15, 4
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <vfprintf+0x2d0>
    14de:	f2 fc       	sbrc	r15, 2
    14e0:	05 c0       	rjmp	.+10     	; 0x14ec <vfprintf+0x2d0>
    14e2:	8f ee       	ldi	r24, 0xEF	; 239
    14e4:	f8 22       	and	r15, r24
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <vfprintf+0x2d0>
    14e8:	1d 2d       	mov	r17, r13
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <vfprintf+0x2d2>
    14ec:	19 2d       	mov	r17, r9
    14ee:	f4 fe       	sbrs	r15, 4
    14f0:	0d c0       	rjmp	.+26     	; 0x150c <vfprintf+0x2f0>
    14f2:	fe 01       	movw	r30, r28
    14f4:	ed 0d       	add	r30, r13
    14f6:	f1 1d       	adc	r31, r1
    14f8:	80 81       	ld	r24, Z
    14fa:	80 33       	cpi	r24, 0x30	; 48
    14fc:	19 f4       	brne	.+6      	; 0x1504 <vfprintf+0x2e8>
    14fe:	99 ee       	ldi	r25, 0xE9	; 233
    1500:	f9 22       	and	r15, r25
    1502:	08 c0       	rjmp	.+16     	; 0x1514 <vfprintf+0x2f8>
    1504:	1f 5f       	subi	r17, 0xFF	; 255
    1506:	f2 fe       	sbrs	r15, 2
    1508:	05 c0       	rjmp	.+10     	; 0x1514 <vfprintf+0x2f8>
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <vfprintf+0x2f6>
    150c:	8f 2d       	mov	r24, r15
    150e:	86 78       	andi	r24, 0x86	; 134
    1510:	09 f0       	breq	.+2      	; 0x1514 <vfprintf+0x2f8>
    1512:	1f 5f       	subi	r17, 0xFF	; 255
    1514:	0f 2d       	mov	r16, r15
    1516:	f3 fc       	sbrc	r15, 3
    1518:	14 c0       	rjmp	.+40     	; 0x1542 <vfprintf+0x326>
    151a:	f0 fe       	sbrs	r15, 0
    151c:	0f c0       	rjmp	.+30     	; 0x153c <vfprintf+0x320>
    151e:	1e 15       	cp	r17, r14
    1520:	10 f0       	brcs	.+4      	; 0x1526 <vfprintf+0x30a>
    1522:	9d 2c       	mov	r9, r13
    1524:	0b c0       	rjmp	.+22     	; 0x153c <vfprintf+0x320>
    1526:	9d 2c       	mov	r9, r13
    1528:	9e 0c       	add	r9, r14
    152a:	91 1a       	sub	r9, r17
    152c:	1e 2d       	mov	r17, r14
    152e:	06 c0       	rjmp	.+12     	; 0x153c <vfprintf+0x320>
    1530:	80 e2       	ldi	r24, 0x20	; 32
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	b3 01       	movw	r22, r6
    1536:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    153a:	1f 5f       	subi	r17, 0xFF	; 255
    153c:	1e 15       	cp	r17, r14
    153e:	c0 f3       	brcs	.-16     	; 0x1530 <vfprintf+0x314>
    1540:	04 c0       	rjmp	.+8      	; 0x154a <vfprintf+0x32e>
    1542:	1e 15       	cp	r17, r14
    1544:	10 f4       	brcc	.+4      	; 0x154a <vfprintf+0x32e>
    1546:	e1 1a       	sub	r14, r17
    1548:	01 c0       	rjmp	.+2      	; 0x154c <vfprintf+0x330>
    154a:	ee 24       	eor	r14, r14
    154c:	04 ff       	sbrs	r16, 4
    154e:	0f c0       	rjmp	.+30     	; 0x156e <vfprintf+0x352>
    1550:	80 e3       	ldi	r24, 0x30	; 48
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	b3 01       	movw	r22, r6
    1556:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    155a:	02 ff       	sbrs	r16, 2
    155c:	1d c0       	rjmp	.+58     	; 0x1598 <vfprintf+0x37c>
    155e:	01 fd       	sbrc	r16, 1
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <vfprintf+0x34c>
    1562:	88 e7       	ldi	r24, 0x78	; 120
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e c0       	rjmp	.+28     	; 0x1584 <vfprintf+0x368>
    1568:	88 e5       	ldi	r24, 0x58	; 88
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0b c0       	rjmp	.+22     	; 0x1584 <vfprintf+0x368>
    156e:	80 2f       	mov	r24, r16
    1570:	86 78       	andi	r24, 0x86	; 134
    1572:	91 f0       	breq	.+36     	; 0x1598 <vfprintf+0x37c>
    1574:	01 ff       	sbrs	r16, 1
    1576:	02 c0       	rjmp	.+4      	; 0x157c <vfprintf+0x360>
    1578:	8b e2       	ldi	r24, 0x2B	; 43
    157a:	01 c0       	rjmp	.+2      	; 0x157e <vfprintf+0x362>
    157c:	80 e2       	ldi	r24, 0x20	; 32
    157e:	f7 fc       	sbrc	r15, 7
    1580:	8d e2       	ldi	r24, 0x2D	; 45
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	b3 01       	movw	r22, r6
    1586:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    158a:	06 c0       	rjmp	.+12     	; 0x1598 <vfprintf+0x37c>
    158c:	80 e3       	ldi	r24, 0x30	; 48
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	b3 01       	movw	r22, r6
    1592:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    1596:	9a 94       	dec	r9
    1598:	d9 14       	cp	r13, r9
    159a:	c0 f3       	brcs	.-16     	; 0x158c <vfprintf+0x370>
    159c:	da 94       	dec	r13
    159e:	f1 01       	movw	r30, r2
    15a0:	ed 0d       	add	r30, r13
    15a2:	f1 1d       	adc	r31, r1
    15a4:	80 81       	ld	r24, Z
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	b3 01       	movw	r22, r6
    15aa:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    15ae:	dd 20       	and	r13, r13
    15b0:	a9 f7       	brne	.-22     	; 0x159c <vfprintf+0x380>
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <vfprintf+0x3a4>
    15b4:	80 e2       	ldi	r24, 0x20	; 32
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	b3 01       	movw	r22, r6
    15ba:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    15be:	ea 94       	dec	r14
    15c0:	ee 20       	and	r14, r14
    15c2:	c1 f7       	brne	.-16     	; 0x15b4 <vfprintf+0x398>
    15c4:	43 ce       	rjmp	.-890    	; 0x124c <vfprintf+0x30>
    15c6:	f3 01       	movw	r30, r6
    15c8:	66 81       	ldd	r22, Z+6	; 0x06
    15ca:	77 81       	ldd	r23, Z+7	; 0x07
    15cc:	cb 01       	movw	r24, r22
    15ce:	2b 96       	adiw	r28, 0x0b	; 11
    15d0:	e2 e1       	ldi	r30, 0x12	; 18
    15d2:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__epilogue_restores__>

000015d6 <dtoa_prf>:
    15d6:	a9 e0       	ldi	r26, 0x09	; 9
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e1 ef       	ldi	r30, 0xF1	; 241
    15dc:	fa e0       	ldi	r31, 0x0A	; 10
    15de:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__prologue_saves__+0x8>
    15e2:	6a 01       	movw	r12, r20
    15e4:	12 2f       	mov	r17, r18
    15e6:	a0 2e       	mov	r10, r16
    15e8:	be 2c       	mov	r11, r14
    15ea:	2b e3       	ldi	r18, 0x3B	; 59
    15ec:	20 17       	cp	r18, r16
    15ee:	18 f4       	brcc	.+6      	; 0x15f6 <dtoa_prf+0x20>
    15f0:	2c e3       	ldi	r18, 0x3C	; 60
    15f2:	92 2e       	mov	r9, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <dtoa_prf+0x24>
    15f6:	90 2e       	mov	r9, r16
    15f8:	93 94       	inc	r9
    15fa:	ae 01       	movw	r20, r28
    15fc:	4f 5f       	subi	r20, 0xFF	; 255
    15fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1600:	27 e0       	ldi	r18, 0x07	; 7
    1602:	09 2d       	mov	r16, r9
    1604:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__ftoa_engine>
    1608:	bc 01       	movw	r22, r24
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	e8 2e       	mov	r14, r24
    160e:	ff 24       	eor	r15, r15
    1610:	c7 01       	movw	r24, r14
    1612:	89 70       	andi	r24, 0x09	; 9
    1614:	90 70       	andi	r25, 0x00	; 0
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	11 f4       	brne	.+4      	; 0x161e <dtoa_prf+0x48>
    161a:	ad e2       	ldi	r26, 0x2D	; 45
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <dtoa_prf+0x5a>
    161e:	b1 fe       	sbrs	r11, 1
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <dtoa_prf+0x50>
    1622:	ab e2       	ldi	r26, 0x2B	; 43
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <dtoa_prf+0x5a>
    1626:	b0 fc       	sbrc	r11, 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <dtoa_prf+0x58>
    162a:	a0 e0       	ldi	r26, 0x00	; 0
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <dtoa_prf+0x5a>
    162e:	a0 e2       	ldi	r26, 0x20	; 32
    1630:	e3 fe       	sbrs	r14, 3
    1632:	3b c0       	rjmp	.+118    	; 0x16aa <dtoa_prf+0xd4>
    1634:	aa 23       	and	r26, r26
    1636:	11 f4       	brne	.+4      	; 0x163c <dtoa_prf+0x66>
    1638:	23 e0       	ldi	r18, 0x03	; 3
    163a:	01 c0       	rjmp	.+2      	; 0x163e <dtoa_prf+0x68>
    163c:	24 e0       	ldi	r18, 0x04	; 4
    163e:	21 17       	cp	r18, r17
    1640:	10 f0       	brcs	.+4      	; 0x1646 <dtoa_prf+0x70>
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <dtoa_prf+0x74>
    1646:	12 1b       	sub	r17, r18
    1648:	21 2f       	mov	r18, r17
    164a:	eb 2c       	mov	r14, r11
    164c:	b4 fe       	sbrs	r11, 4
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <dtoa_prf+0x7e>
    1650:	32 2f       	mov	r19, r18
    1652:	0a c0       	rjmp	.+20     	; 0x1668 <dtoa_prf+0x92>
    1654:	f6 01       	movw	r30, r12
    1656:	32 2f       	mov	r19, r18
    1658:	80 e2       	ldi	r24, 0x20	; 32
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <dtoa_prf+0x8a>
    165c:	81 93       	st	Z+, r24
    165e:	31 50       	subi	r19, 0x01	; 1
    1660:	33 23       	and	r19, r19
    1662:	e1 f7       	brne	.-8      	; 0x165c <dtoa_prf+0x86>
    1664:	c2 0e       	add	r12, r18
    1666:	d1 1c       	adc	r13, r1
    1668:	aa 23       	and	r26, r26
    166a:	19 f0       	breq	.+6      	; 0x1672 <dtoa_prf+0x9c>
    166c:	f6 01       	movw	r30, r12
    166e:	a1 93       	st	Z+, r26
    1670:	6f 01       	movw	r12, r30
    1672:	f6 01       	movw	r30, r12
    1674:	31 96       	adiw	r30, 0x01	; 1
    1676:	e2 fe       	sbrs	r14, 2
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <dtoa_prf+0xae>
    167a:	9e e4       	ldi	r25, 0x4E	; 78
    167c:	d6 01       	movw	r26, r12
    167e:	9c 93       	st	X, r25
    1680:	81 e4       	ldi	r24, 0x41	; 65
    1682:	04 c0       	rjmp	.+8      	; 0x168c <dtoa_prf+0xb6>
    1684:	9e e6       	ldi	r25, 0x6E	; 110
    1686:	d6 01       	movw	r26, r12
    1688:	9c 93       	st	X, r25
    168a:	81 e6       	ldi	r24, 0x61	; 97
    168c:	11 96       	adiw	r26, 0x01	; 1
    168e:	8c 93       	st	X, r24
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	32 96       	adiw	r30, 0x02	; 2
    1694:	df 01       	movw	r26, r30
    1696:	83 2f       	mov	r24, r19
    1698:	90 e2       	ldi	r25, 0x20	; 32
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <dtoa_prf+0xca>
    169c:	9d 93       	st	X+, r25
    169e:	81 50       	subi	r24, 0x01	; 1
    16a0:	88 23       	and	r24, r24
    16a2:	e1 f7       	brne	.-8      	; 0x169c <dtoa_prf+0xc6>
    16a4:	e3 0f       	add	r30, r19
    16a6:	f1 1d       	adc	r31, r1
    16a8:	40 c0       	rjmp	.+128    	; 0x172a <dtoa_prf+0x154>
    16aa:	e2 fe       	sbrs	r14, 2
    16ac:	42 c0       	rjmp	.+132    	; 0x1732 <dtoa_prf+0x15c>
    16ae:	aa 23       	and	r26, r26
    16b0:	11 f4       	brne	.+4      	; 0x16b6 <dtoa_prf+0xe0>
    16b2:	23 e0       	ldi	r18, 0x03	; 3
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <dtoa_prf+0xe2>
    16b6:	24 e0       	ldi	r18, 0x04	; 4
    16b8:	21 17       	cp	r18, r17
    16ba:	10 f0       	brcs	.+4      	; 0x16c0 <dtoa_prf+0xea>
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <dtoa_prf+0xee>
    16c0:	12 1b       	sub	r17, r18
    16c2:	21 2f       	mov	r18, r17
    16c4:	eb 2c       	mov	r14, r11
    16c6:	b4 fe       	sbrs	r11, 4
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <dtoa_prf+0xf8>
    16ca:	92 2f       	mov	r25, r18
    16cc:	0a c0       	rjmp	.+20     	; 0x16e2 <dtoa_prf+0x10c>
    16ce:	f6 01       	movw	r30, r12
    16d0:	92 2f       	mov	r25, r18
    16d2:	80 e2       	ldi	r24, 0x20	; 32
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <dtoa_prf+0x104>
    16d6:	81 93       	st	Z+, r24
    16d8:	91 50       	subi	r25, 0x01	; 1
    16da:	99 23       	and	r25, r25
    16dc:	e1 f7       	brne	.-8      	; 0x16d6 <dtoa_prf+0x100>
    16de:	c2 0e       	add	r12, r18
    16e0:	d1 1c       	adc	r13, r1
    16e2:	aa 23       	and	r26, r26
    16e4:	19 f0       	breq	.+6      	; 0x16ec <dtoa_prf+0x116>
    16e6:	f6 01       	movw	r30, r12
    16e8:	a1 93       	st	Z+, r26
    16ea:	6f 01       	movw	r12, r30
    16ec:	f6 01       	movw	r30, r12
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	e2 fe       	sbrs	r14, 2
    16f2:	08 c0       	rjmp	.+16     	; 0x1704 <dtoa_prf+0x12e>
    16f4:	89 e4       	ldi	r24, 0x49	; 73
    16f6:	d6 01       	movw	r26, r12
    16f8:	8c 93       	st	X, r24
    16fa:	8e e4       	ldi	r24, 0x4E	; 78
    16fc:	11 96       	adiw	r26, 0x01	; 1
    16fe:	8c 93       	st	X, r24
    1700:	86 e4       	ldi	r24, 0x46	; 70
    1702:	07 c0       	rjmp	.+14     	; 0x1712 <dtoa_prf+0x13c>
    1704:	89 e6       	ldi	r24, 0x69	; 105
    1706:	d6 01       	movw	r26, r12
    1708:	8c 93       	st	X, r24
    170a:	8e e6       	ldi	r24, 0x6E	; 110
    170c:	11 96       	adiw	r26, 0x01	; 1
    170e:	8c 93       	st	X, r24
    1710:	86 e6       	ldi	r24, 0x66	; 102
    1712:	81 83       	std	Z+1, r24	; 0x01
    1714:	32 96       	adiw	r30, 0x02	; 2
    1716:	df 01       	movw	r26, r30
    1718:	89 2f       	mov	r24, r25
    171a:	20 e2       	ldi	r18, 0x20	; 32
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <dtoa_prf+0x14c>
    171e:	2d 93       	st	X+, r18
    1720:	81 50       	subi	r24, 0x01	; 1
    1722:	88 23       	and	r24, r24
    1724:	e1 f7       	brne	.-8      	; 0x171e <dtoa_prf+0x148>
    1726:	e9 0f       	add	r30, r25
    1728:	f1 1d       	adc	r31, r1
    172a:	10 82       	st	Z, r1
    172c:	2e ef       	ldi	r18, 0xFE	; 254
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	af c0       	rjmp	.+350    	; 0x1890 <dtoa_prf+0x2ba>
    1732:	16 16       	cp	r1, r22
    1734:	17 06       	cpc	r1, r23
    1736:	1c f0       	brlt	.+6      	; 0x173e <dtoa_prf+0x168>
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	03 c0       	rjmp	.+6      	; 0x1744 <dtoa_prf+0x16e>
    173e:	ab 01       	movw	r20, r22
    1740:	4f 5f       	subi	r20, 0xFF	; 255
    1742:	5f 4f       	sbci	r21, 0xFF	; 255
    1744:	aa 20       	and	r10, r10
    1746:	19 f4       	brne	.+6      	; 0x174e <dtoa_prf+0x178>
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <dtoa_prf+0x17e>
    174e:	8a 2d       	mov	r24, r10
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	aa 23       	and	r26, r26
    175a:	11 f0       	breq	.+4      	; 0x1760 <dtoa_prf+0x18a>
    175c:	21 e0       	ldi	r18, 0x01	; 1
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	24 0f       	add	r18, r20
    1762:	35 1f       	adc	r19, r21
    1764:	28 0f       	add	r18, r24
    1766:	39 1f       	adc	r19, r25
    1768:	81 2f       	mov	r24, r17
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	28 17       	cp	r18, r24
    176e:	39 07       	cpc	r19, r25
    1770:	14 f0       	brlt	.+4      	; 0x1776 <dtoa_prf+0x1a0>
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <dtoa_prf+0x1a4>
    1776:	12 1b       	sub	r17, r18
    1778:	21 2f       	mov	r18, r17
    177a:	4b 2d       	mov	r20, r11
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	ca 01       	movw	r24, r20
    1780:	80 71       	andi	r24, 0x10	; 16
    1782:	90 70       	andi	r25, 0x00	; 0
    1784:	b4 fc       	sbrc	r11, 4
    1786:	0d c0       	rjmp	.+26     	; 0x17a2 <dtoa_prf+0x1cc>
    1788:	b3 fc       	sbrc	r11, 3
    178a:	0b c0       	rjmp	.+22     	; 0x17a2 <dtoa_prf+0x1cc>
    178c:	f6 01       	movw	r30, r12
    178e:	32 2f       	mov	r19, r18
    1790:	40 e2       	ldi	r20, 0x20	; 32
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <dtoa_prf+0x1c2>
    1794:	41 93       	st	Z+, r20
    1796:	31 50       	subi	r19, 0x01	; 1
    1798:	33 23       	and	r19, r19
    179a:	e1 f7       	brne	.-8      	; 0x1794 <dtoa_prf+0x1be>
    179c:	c2 0e       	add	r12, r18
    179e:	d1 1c       	adc	r13, r1
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <dtoa_prf+0x1ce>
    17a2:	32 2f       	mov	r19, r18
    17a4:	aa 23       	and	r26, r26
    17a6:	19 f0       	breq	.+6      	; 0x17ae <dtoa_prf+0x1d8>
    17a8:	f6 01       	movw	r30, r12
    17aa:	a1 93       	st	Z+, r26
    17ac:	6f 01       	movw	r12, r30
    17ae:	89 2b       	or	r24, r25
    17b0:	11 f0       	breq	.+4      	; 0x17b6 <dtoa_prf+0x1e0>
    17b2:	13 2f       	mov	r17, r19
    17b4:	0a c0       	rjmp	.+20     	; 0x17ca <dtoa_prf+0x1f4>
    17b6:	f6 01       	movw	r30, r12
    17b8:	13 2f       	mov	r17, r19
    17ba:	80 e3       	ldi	r24, 0x30	; 48
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <dtoa_prf+0x1ec>
    17be:	81 93       	st	Z+, r24
    17c0:	11 50       	subi	r17, 0x01	; 1
    17c2:	11 23       	and	r17, r17
    17c4:	e1 f7       	brne	.-8      	; 0x17be <dtoa_prf+0x1e8>
    17c6:	c3 0e       	add	r12, r19
    17c8:	d1 1c       	adc	r13, r1
    17ca:	09 2d       	mov	r16, r9
    17cc:	06 0f       	add	r16, r22
    17ce:	ba 80       	ldd	r11, Y+2	; 0x02
    17d0:	90 e1       	ldi	r25, 0x10	; 16
    17d2:	89 2e       	mov	r8, r25
    17d4:	91 2c       	mov	r9, r1
    17d6:	8e 20       	and	r8, r14
    17d8:	9f 20       	and	r9, r15
    17da:	e4 fe       	sbrs	r14, 4
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <dtoa_prf+0x210>
    17de:	f1 e3       	ldi	r31, 0x31	; 49
    17e0:	bf 16       	cp	r11, r31
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <dtoa_prf+0x210>
    17e4:	01 50       	subi	r16, 0x01	; 1
    17e6:	10 16       	cp	r1, r16
    17e8:	14 f0       	brlt	.+4      	; 0x17ee <dtoa_prf+0x218>
    17ea:	01 e0       	ldi	r16, 0x01	; 1
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <dtoa_prf+0x21e>
    17ee:	09 30       	cpi	r16, 0x09	; 9
    17f0:	08 f0       	brcs	.+2      	; 0x17f4 <dtoa_prf+0x21e>
    17f2:	08 e0       	ldi	r16, 0x08	; 8
    17f4:	9b 01       	movw	r18, r22
    17f6:	77 ff       	sbrs	r23, 7
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <dtoa_prf+0x228>
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	cb 01       	movw	r24, r22
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	82 1b       	sub	r24, r18
    1804:	93 0b       	sbc	r25, r19
    1806:	fe 01       	movw	r30, r28
    1808:	31 96       	adiw	r30, 0x01	; 1
    180a:	e8 0f       	add	r30, r24
    180c:	f9 1f       	adc	r31, r25
    180e:	8e e2       	ldi	r24, 0x2E	; 46
    1810:	f8 2e       	mov	r15, r24
    1812:	3b 01       	movw	r6, r22
    1814:	60 1a       	sub	r6, r16
    1816:	71 08       	sbc	r7, r1
    1818:	8a 2d       	mov	r24, r10
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	44 27       	eor	r20, r20
    181e:	55 27       	eor	r21, r21
    1820:	48 1b       	sub	r20, r24
    1822:	59 0b       	sbc	r21, r25
    1824:	8f ef       	ldi	r24, 0xFF	; 255
    1826:	2f 3f       	cpi	r18, 0xFF	; 255
    1828:	38 07       	cpc	r19, r24
    182a:	19 f4       	brne	.+6      	; 0x1832 <dtoa_prf+0x25c>
    182c:	d6 01       	movw	r26, r12
    182e:	fd 92       	st	X+, r15
    1830:	6d 01       	movw	r12, r26
    1832:	62 17       	cp	r22, r18
    1834:	73 07       	cpc	r23, r19
    1836:	2c f0       	brlt	.+10     	; 0x1842 <dtoa_prf+0x26c>
    1838:	62 16       	cp	r6, r18
    183a:	73 06       	cpc	r7, r19
    183c:	14 f4       	brge	.+4      	; 0x1842 <dtoa_prf+0x26c>
    183e:	80 81       	ld	r24, Z
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <dtoa_prf+0x26e>
    1842:	80 e3       	ldi	r24, 0x30	; 48
    1844:	21 50       	subi	r18, 0x01	; 1
    1846:	30 40       	sbci	r19, 0x00	; 0
    1848:	31 96       	adiw	r30, 0x01	; 1
    184a:	24 17       	cp	r18, r20
    184c:	35 07       	cpc	r19, r21
    184e:	24 f0       	brlt	.+8      	; 0x1858 <dtoa_prf+0x282>
    1850:	d6 01       	movw	r26, r12
    1852:	8d 93       	st	X+, r24
    1854:	6d 01       	movw	r12, r26
    1856:	e6 cf       	rjmp	.-52     	; 0x1824 <dtoa_prf+0x24e>
    1858:	26 17       	cp	r18, r22
    185a:	37 07       	cpc	r19, r23
    185c:	49 f4       	brne	.+18     	; 0x1870 <dtoa_prf+0x29a>
    185e:	b5 e3       	ldi	r27, 0x35	; 53
    1860:	bb 15       	cp	r27, r11
    1862:	28 f0       	brcs	.+10     	; 0x186e <dtoa_prf+0x298>
    1864:	bb 16       	cp	r11, r27
    1866:	21 f4       	brne	.+8      	; 0x1870 <dtoa_prf+0x29a>
    1868:	81 14       	cp	r8, r1
    186a:	91 04       	cpc	r9, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <dtoa_prf+0x29a>
    186e:	81 e3       	ldi	r24, 0x31	; 49
    1870:	f6 01       	movw	r30, r12
    1872:	81 93       	st	Z+, r24
    1874:	d6 01       	movw	r26, r12
    1876:	81 2f       	mov	r24, r17
    1878:	90 e2       	ldi	r25, 0x20	; 32
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <dtoa_prf+0x2aa>
    187c:	9c 93       	st	X, r25
    187e:	81 50       	subi	r24, 0x01	; 1
    1880:	11 96       	adiw	r26, 0x01	; 1
    1882:	88 23       	and	r24, r24
    1884:	d9 f7       	brne	.-10     	; 0x187c <dtoa_prf+0x2a6>
    1886:	e1 0f       	add	r30, r17
    1888:	f1 1d       	adc	r31, r1
    188a:	10 82       	st	Z, r1
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	c9 01       	movw	r24, r18
    1892:	29 96       	adiw	r28, 0x09	; 9
    1894:	ee e0       	ldi	r30, 0x0E	; 14
    1896:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__epilogue_restores__+0x8>

0000189a <strtod>:
    189a:	a0 e0       	ldi	r26, 0x00	; 0
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e3 e5       	ldi	r30, 0x53	; 83
    18a0:	fc e0       	ldi	r31, 0x0C	; 12
    18a2:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__prologue_saves__+0xc>
    18a6:	ec 01       	movw	r28, r24
    18a8:	5b 01       	movw	r10, r22
    18aa:	61 15       	cp	r22, r1
    18ac:	71 05       	cpc	r23, r1
    18ae:	19 f0       	breq	.+6      	; 0x18b6 <strtod+0x1c>
    18b0:	fb 01       	movw	r30, r22
    18b2:	91 83       	std	Z+1, r25	; 0x01
    18b4:	80 83       	st	Z, r24
    18b6:	f9 90       	ld	r15, Y+
    18b8:	8f 2d       	mov	r24, r15
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <isspace>
    18c0:	89 2b       	or	r24, r25
    18c2:	c9 f7       	brne	.-14     	; 0x18b6 <strtod+0x1c>
    18c4:	fd e2       	ldi	r31, 0x2D	; 45
    18c6:	ff 16       	cp	r15, r31
    18c8:	21 f4       	brne	.+8      	; 0x18d2 <strtod+0x38>
    18ca:	f9 90       	ld	r15, Y+
    18cc:	ee 24       	eor	r14, r14
    18ce:	e3 94       	inc	r14
    18d0:	05 c0       	rjmp	.+10     	; 0x18dc <strtod+0x42>
    18d2:	2b e2       	ldi	r18, 0x2B	; 43
    18d4:	f2 16       	cp	r15, r18
    18d6:	09 f4       	brne	.+2      	; 0x18da <strtod+0x40>
    18d8:	f9 90       	ld	r15, Y+
    18da:	ee 24       	eor	r14, r14
    18dc:	8e 01       	movw	r16, r28
    18de:	01 50       	subi	r16, 0x01	; 1
    18e0:	10 40       	sbci	r17, 0x00	; 0
    18e2:	c8 01       	movw	r24, r16
    18e4:	64 e5       	ldi	r22, 0x54	; 84
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	43 e0       	ldi	r20, 0x03	; 3
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <strncasecmp_P>
    18f0:	89 2b       	or	r24, r25
    18f2:	01 f5       	brne	.+64     	; 0x1934 <strtod+0x9a>
    18f4:	8e 01       	movw	r16, r28
    18f6:	0e 5f       	subi	r16, 0xFE	; 254
    18f8:	1f 4f       	sbci	r17, 0xFF	; 255
    18fa:	c8 01       	movw	r24, r16
    18fc:	67 e5       	ldi	r22, 0x57	; 87
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	45 e0       	ldi	r20, 0x05	; 5
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <strncasecmp_P>
    1908:	89 2b       	or	r24, r25
    190a:	19 f4       	brne	.+6      	; 0x1912 <strtod+0x78>
    190c:	8e 01       	movw	r16, r28
    190e:	09 5f       	subi	r16, 0xF9	; 249
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
    1912:	a1 14       	cp	r10, r1
    1914:	b1 04       	cpc	r11, r1
    1916:	19 f0       	breq	.+6      	; 0x191e <strtod+0x84>
    1918:	f5 01       	movw	r30, r10
    191a:	11 83       	std	Z+1, r17	; 0x01
    191c:	00 83       	st	Z, r16
    191e:	e0 fc       	sbrc	r14, 0
    1920:	04 c0       	rjmp	.+8      	; 0x192a <strtod+0x90>
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	80 e8       	ldi	r24, 0x80	; 128
    1928:	14 c0       	rjmp	.+40     	; 0x1952 <strtod+0xb8>
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	80 e8       	ldi	r24, 0x80	; 128
    1930:	6f ef       	ldi	r22, 0xFF	; 255
    1932:	08 c1       	rjmp	.+528    	; 0x1b44 <strtod+0x2aa>
    1934:	c8 01       	movw	r24, r16
    1936:	6c e5       	ldi	r22, 0x5C	; 92
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	43 e0       	ldi	r20, 0x03	; 3
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <strncasecmp_P>
    1942:	89 2b       	or	r24, r25
    1944:	69 f4       	brne	.+26     	; 0x1960 <strtod+0xc6>
    1946:	a1 14       	cp	r10, r1
    1948:	b1 04       	cpc	r11, r1
    194a:	29 f4       	brne	.+10     	; 0x1956 <strtod+0xbc>
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	80 ec       	ldi	r24, 0xC0	; 192
    1952:	6f e7       	ldi	r22, 0x7F	; 127
    1954:	f7 c0       	rjmp	.+494    	; 0x1b44 <strtod+0x2aa>
    1956:	22 96       	adiw	r28, 0x02	; 2
    1958:	f5 01       	movw	r30, r10
    195a:	d1 83       	std	Z+1, r29	; 0x01
    195c:	c0 83       	st	Z, r28
    195e:	f6 cf       	rjmp	.-20     	; 0x194c <strtod+0xb2>
    1960:	88 24       	eor	r8, r8
    1962:	99 24       	eor	r9, r9
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	ef 2d       	mov	r30, r15
    196e:	e0 53       	subi	r30, 0x30	; 48
    1970:	ea 30       	cpi	r30, 0x0A	; 10
    1972:	a0 f5       	brcc	.+104    	; 0x19dc <strtod+0x142>
    1974:	f2 e0       	ldi	r31, 0x02	; 2
    1976:	ef 2a       	or	r14, r31
    1978:	8e 2d       	mov	r24, r14
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 01       	movw	r18, r24
    197e:	28 70       	andi	r18, 0x08	; 8
    1980:	30 70       	andi	r19, 0x00	; 0
    1982:	e2 fe       	sbrs	r14, 2
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <strtod+0xf8>
    1986:	23 2b       	or	r18, r19
    1988:	79 f5       	brne	.+94     	; 0x19e8 <strtod+0x14e>
    198a:	08 94       	sec
    198c:	81 1c       	adc	r8, r1
    198e:	91 1c       	adc	r9, r1
    1990:	2b c0       	rjmp	.+86     	; 0x19e8 <strtod+0x14e>
    1992:	23 2b       	or	r18, r19
    1994:	19 f0       	breq	.+6      	; 0x199c <strtod+0x102>
    1996:	08 94       	sec
    1998:	81 08       	sbc	r8, r1
    199a:	91 08       	sbc	r9, r1
    199c:	db 01       	movw	r26, r22
    199e:	ca 01       	movw	r24, r20
    19a0:	12 e0       	ldi	r17, 0x02	; 2
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	aa 1f       	adc	r26, r26
    19a8:	bb 1f       	adc	r27, r27
    19aa:	1a 95       	dec	r17
    19ac:	d1 f7       	brne	.-12     	; 0x19a2 <strtod+0x108>
    19ae:	48 0f       	add	r20, r24
    19b0:	59 1f       	adc	r21, r25
    19b2:	6a 1f       	adc	r22, r26
    19b4:	7b 1f       	adc	r23, r27
    19b6:	44 0f       	add	r20, r20
    19b8:	55 1f       	adc	r21, r21
    19ba:	66 1f       	adc	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	4e 0f       	add	r20, r30
    19c0:	51 1d       	adc	r21, r1
    19c2:	61 1d       	adc	r22, r1
    19c4:	71 1d       	adc	r23, r1
    19c6:	48 39       	cpi	r20, 0x98	; 152
    19c8:	29 e9       	ldi	r18, 0x99	; 153
    19ca:	52 07       	cpc	r21, r18
    19cc:	29 e9       	ldi	r18, 0x99	; 153
    19ce:	62 07       	cpc	r22, r18
    19d0:	29 e1       	ldi	r18, 0x19	; 25
    19d2:	72 07       	cpc	r23, r18
    19d4:	48 f0       	brcs	.+18     	; 0x19e8 <strtod+0x14e>
    19d6:	84 e0       	ldi	r24, 0x04	; 4
    19d8:	e8 2a       	or	r14, r24
    19da:	06 c0       	rjmp	.+12     	; 0x19e8 <strtod+0x14e>
    19dc:	ee 3f       	cpi	r30, 0xFE	; 254
    19de:	31 f4       	brne	.+12     	; 0x19ec <strtod+0x152>
    19e0:	e3 fc       	sbrc	r14, 3
    19e2:	39 c0       	rjmp	.+114    	; 0x1a56 <strtod+0x1bc>
    19e4:	98 e0       	ldi	r25, 0x08	; 8
    19e6:	e9 2a       	or	r14, r25
    19e8:	f9 90       	ld	r15, Y+
    19ea:	c0 cf       	rjmp	.-128    	; 0x196c <strtod+0xd2>
    19ec:	e5 33       	cpi	r30, 0x35	; 53
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <strtod+0x15a>
    19f0:	e5 31       	cpi	r30, 0x15	; 21
    19f2:	89 f5       	brne	.+98     	; 0x1a56 <strtod+0x1bc>
    19f4:	29 91       	ld	r18, Y+
    19f6:	2d 32       	cpi	r18, 0x2D	; 45
    19f8:	19 f4       	brne	.+6      	; 0x1a00 <strtod+0x166>
    19fa:	e0 e1       	ldi	r30, 0x10	; 16
    19fc:	ee 2a       	or	r14, r30
    19fe:	05 c0       	rjmp	.+10     	; 0x1a0a <strtod+0x170>
    1a00:	2b 32       	cpi	r18, 0x2B	; 43
    1a02:	19 f0       	breq	.+6      	; 0x1a0a <strtod+0x170>
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <strtod+0x176>
    1a0a:	29 91       	ld	r18, Y+
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	e2 2f       	mov	r30, r18
    1a12:	e0 53       	subi	r30, 0x30	; 48
    1a14:	ea 30       	cpi	r30, 0x0A	; 10
    1a16:	18 f0       	brcs	.+6      	; 0x1a1e <strtod+0x184>
    1a18:	c8 1b       	sub	r28, r24
    1a1a:	d9 0b       	sbc	r29, r25
    1a1c:	1c c0       	rjmp	.+56     	; 0x1a56 <strtod+0x1bc>
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	fc e0       	ldi	r31, 0x0C	; 12
    1a24:	20 38       	cpi	r18, 0x80	; 128
    1a26:	3f 07       	cpc	r19, r31
    1a28:	5c f4       	brge	.+22     	; 0x1a40 <strtod+0x1a6>
    1a2a:	c9 01       	movw	r24, r18
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	28 0f       	add	r18, r24
    1a36:	39 1f       	adc	r19, r25
    1a38:	22 0f       	add	r18, r18
    1a3a:	33 1f       	adc	r19, r19
    1a3c:	2e 0f       	add	r18, r30
    1a3e:	31 1d       	adc	r19, r1
    1a40:	e9 91       	ld	r30, Y+
    1a42:	e0 53       	subi	r30, 0x30	; 48
    1a44:	ea 30       	cpi	r30, 0x0A	; 10
    1a46:	68 f3       	brcs	.-38     	; 0x1a22 <strtod+0x188>
    1a48:	e4 fe       	sbrs	r14, 4
    1a4a:	03 c0       	rjmp	.+6      	; 0x1a52 <strtod+0x1b8>
    1a4c:	30 95       	com	r19
    1a4e:	21 95       	neg	r18
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255
    1a52:	82 0e       	add	r8, r18
    1a54:	93 1e       	adc	r9, r19
    1a56:	ce 2c       	mov	r12, r14
    1a58:	dd 24       	eor	r13, r13
    1a5a:	e1 fe       	sbrs	r14, 1
    1a5c:	07 c0       	rjmp	.+14     	; 0x1a6c <strtod+0x1d2>
    1a5e:	a1 14       	cp	r10, r1
    1a60:	b1 04       	cpc	r11, r1
    1a62:	21 f0       	breq	.+8      	; 0x1a6c <strtod+0x1d2>
    1a64:	21 97       	sbiw	r28, 0x01	; 1
    1a66:	f5 01       	movw	r30, r10
    1a68:	d1 83       	std	Z+1, r29	; 0x01
    1a6a:	c0 83       	st	Z, r28
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	ba 01       	movw	r22, r20
    1a70:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__floatunsisf>
    1a74:	7b 01       	movw	r14, r22
    1a76:	8c 01       	movw	r16, r24
    1a78:	f3 e0       	ldi	r31, 0x03	; 3
    1a7a:	cf 22       	and	r12, r31
    1a7c:	dd 24       	eor	r13, r13
    1a7e:	23 e0       	ldi	r18, 0x03	; 3
    1a80:	c2 16       	cp	r12, r18
    1a82:	d1 04       	cpc	r13, r1
    1a84:	21 f4       	brne	.+8      	; 0x1a8e <strtod+0x1f4>
    1a86:	17 fb       	bst	r17, 7
    1a88:	10 95       	com	r17
    1a8a:	17 f9       	bld	r17, 7
    1a8c:	10 95       	com	r17
    1a8e:	57 01       	movw	r10, r14
    1a90:	68 01       	movw	r12, r16
    1a92:	c8 01       	movw	r24, r16
    1a94:	b7 01       	movw	r22, r14
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <__cmpsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <strtod+0x20e>
    1aa6:	4a c0       	rjmp	.+148    	; 0x1b3c <strtod+0x2a2>
    1aa8:	97 fe       	sbrs	r9, 7
    1aaa:	0d c0       	rjmp	.+26     	; 0x1ac6 <strtod+0x22c>
    1aac:	23 e7       	ldi	r18, 0x73	; 115
    1aae:	e2 2e       	mov	r14, r18
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	f2 2e       	mov	r15, r18
    1ab4:	90 94       	com	r9
    1ab6:	81 94       	neg	r8
    1ab8:	91 08       	sbc	r9, r1
    1aba:	93 94       	inc	r9
    1abc:	c0 e2       	ldi	r28, 0x20	; 32
    1abe:	d0 e0       	ldi	r29, 0x00	; 0
    1ac0:	00 e0       	ldi	r16, 0x00	; 0
    1ac2:	10 e0       	ldi	r17, 0x00	; 0
    1ac4:	12 c0       	rjmp	.+36     	; 0x1aea <strtod+0x250>
    1ac6:	9b e8       	ldi	r25, 0x8B	; 139
    1ac8:	e9 2e       	mov	r14, r25
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	f9 2e       	mov	r15, r25
    1ace:	f6 cf       	rjmp	.-20     	; 0x1abc <strtod+0x222>
    1ad0:	f7 01       	movw	r30, r14
    1ad2:	25 91       	lpm	r18, Z+
    1ad4:	35 91       	lpm	r19, Z+
    1ad6:	45 91       	lpm	r20, Z+
    1ad8:	54 91       	lpm	r21, Z+
    1ada:	c6 01       	movw	r24, r12
    1adc:	b5 01       	movw	r22, r10
    1ade:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__mulsf3>
    1ae2:	5b 01       	movw	r10, r22
    1ae4:	6c 01       	movw	r12, r24
    1ae6:	8c 1a       	sub	r8, r28
    1ae8:	9d 0a       	sbc	r9, r29
    1aea:	8c 16       	cp	r8, r28
    1aec:	9d 06       	cpc	r9, r29
    1aee:	84 f7       	brge	.-32     	; 0x1ad0 <strtod+0x236>
    1af0:	d5 95       	asr	r29
    1af2:	c7 95       	ror	r28
    1af4:	0f 5f       	subi	r16, 0xFF	; 255
    1af6:	1f 4f       	sbci	r17, 0xFF	; 255
    1af8:	06 30       	cpi	r16, 0x06	; 6
    1afa:	11 05       	cpc	r17, r1
    1afc:	29 f0       	breq	.+10     	; 0x1b08 <strtod+0x26e>
    1afe:	8c ef       	ldi	r24, 0xFC	; 252
    1b00:	9f ef       	ldi	r25, 0xFF	; 255
    1b02:	e8 0e       	add	r14, r24
    1b04:	f9 1e       	adc	r15, r25
    1b06:	f1 cf       	rjmp	.-30     	; 0x1aea <strtod+0x250>
    1b08:	c5 01       	movw	r24, r10
    1b0a:	d6 01       	movw	r26, r12
    1b0c:	7c 01       	movw	r14, r24
    1b0e:	8d 01       	movw	r16, r26
    1b10:	8c 2d       	mov	r24, r12
    1b12:	88 0f       	add	r24, r24
    1b14:	8d 2d       	mov	r24, r13
    1b16:	88 1f       	adc	r24, r24
    1b18:	8f 3f       	cpi	r24, 0xFF	; 255
    1b1a:	51 f0       	breq	.+20     	; 0x1b30 <strtod+0x296>
    1b1c:	c6 01       	movw	r24, r12
    1b1e:	b5 01       	movw	r22, r10
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <__cmpsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	31 f4       	brne	.+12     	; 0x1b3c <strtod+0x2a2>
    1b30:	82 e2       	ldi	r24, 0x22	; 34
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	90 93 16 04 	sts	0x0416, r25
    1b38:	80 93 15 04 	sts	0x0415, r24
    1b3c:	7e 2d       	mov	r23, r14
    1b3e:	9f 2d       	mov	r25, r15
    1b40:	80 2f       	mov	r24, r16
    1b42:	61 2f       	mov	r22, r17
    1b44:	27 2f       	mov	r18, r23
    1b46:	39 2f       	mov	r19, r25
    1b48:	48 2f       	mov	r20, r24
    1b4a:	56 2f       	mov	r21, r22
    1b4c:	b9 01       	movw	r22, r18
    1b4e:	ca 01       	movw	r24, r20
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	ec e0       	ldi	r30, 0x0C	; 12
    1b56:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__epilogue_restores__+0xc>

00001b5a <__ftoa_engine>:
    1b5a:	28 30       	cpi	r18, 0x08	; 8
    1b5c:	08 f0       	brcs	.+2      	; 0x1b60 <__ftoa_engine+0x6>
    1b5e:	27 e0       	ldi	r18, 0x07	; 7
    1b60:	33 27       	eor	r19, r19
    1b62:	da 01       	movw	r26, r20
    1b64:	99 0f       	add	r25, r25
    1b66:	31 1d       	adc	r19, r1
    1b68:	87 fd       	sbrc	r24, 7
    1b6a:	91 60       	ori	r25, 0x01	; 1
    1b6c:	00 96       	adiw	r24, 0x00	; 0
    1b6e:	61 05       	cpc	r22, r1
    1b70:	71 05       	cpc	r23, r1
    1b72:	39 f4       	brne	.+14     	; 0x1b82 <__ftoa_engine+0x28>
    1b74:	32 60       	ori	r19, 0x02	; 2
    1b76:	2e 5f       	subi	r18, 0xFE	; 254
    1b78:	3d 93       	st	X+, r19
    1b7a:	30 e3       	ldi	r19, 0x30	; 48
    1b7c:	2a 95       	dec	r18
    1b7e:	e1 f7       	brne	.-8      	; 0x1b78 <__ftoa_engine+0x1e>
    1b80:	08 95       	ret
    1b82:	9f 3f       	cpi	r25, 0xFF	; 255
    1b84:	30 f0       	brcs	.+12     	; 0x1b92 <__ftoa_engine+0x38>
    1b86:	80 38       	cpi	r24, 0x80	; 128
    1b88:	71 05       	cpc	r23, r1
    1b8a:	61 05       	cpc	r22, r1
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <__ftoa_engine+0x36>
    1b8e:	3c 5f       	subi	r19, 0xFC	; 252
    1b90:	3c 5f       	subi	r19, 0xFC	; 252
    1b92:	3d 93       	st	X+, r19
    1b94:	91 30       	cpi	r25, 0x01	; 1
    1b96:	08 f0       	brcs	.+2      	; 0x1b9a <__ftoa_engine+0x40>
    1b98:	80 68       	ori	r24, 0x80	; 128
    1b9a:	91 1d       	adc	r25, r1
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	1f 93       	push	r17
    1ba2:	0f 93       	push	r16
    1ba4:	ff 92       	push	r15
    1ba6:	ef 92       	push	r14
    1ba8:	19 2f       	mov	r17, r25
    1baa:	98 7f       	andi	r25, 0xF8	; 248
    1bac:	96 95       	lsr	r25
    1bae:	e9 2f       	mov	r30, r25
    1bb0:	96 95       	lsr	r25
    1bb2:	96 95       	lsr	r25
    1bb4:	e9 0f       	add	r30, r25
    1bb6:	ff 27       	eor	r31, r31
    1bb8:	e7 51       	subi	r30, 0x17	; 23
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	99 27       	eor	r25, r25
    1bbe:	33 27       	eor	r19, r19
    1bc0:	ee 24       	eor	r14, r14
    1bc2:	ff 24       	eor	r15, r15
    1bc4:	a7 01       	movw	r20, r14
    1bc6:	e7 01       	movw	r28, r14
    1bc8:	05 90       	lpm	r0, Z+
    1bca:	08 94       	sec
    1bcc:	07 94       	ror	r0
    1bce:	28 f4       	brcc	.+10     	; 0x1bda <__ftoa_engine+0x80>
    1bd0:	36 0f       	add	r19, r22
    1bd2:	e7 1e       	adc	r14, r23
    1bd4:	f8 1e       	adc	r15, r24
    1bd6:	49 1f       	adc	r20, r25
    1bd8:	51 1d       	adc	r21, r1
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	06 94       	lsr	r0
    1be4:	a1 f7       	brne	.-24     	; 0x1bce <__ftoa_engine+0x74>
    1be6:	05 90       	lpm	r0, Z+
    1be8:	07 94       	ror	r0
    1bea:	28 f4       	brcc	.+10     	; 0x1bf6 <__ftoa_engine+0x9c>
    1bec:	e7 0e       	add	r14, r23
    1bee:	f8 1e       	adc	r15, r24
    1bf0:	49 1f       	adc	r20, r25
    1bf2:	56 1f       	adc	r21, r22
    1bf4:	c1 1d       	adc	r28, r1
    1bf6:	77 0f       	add	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	66 1f       	adc	r22, r22
    1bfe:	06 94       	lsr	r0
    1c00:	a1 f7       	brne	.-24     	; 0x1bea <__ftoa_engine+0x90>
    1c02:	05 90       	lpm	r0, Z+
    1c04:	07 94       	ror	r0
    1c06:	28 f4       	brcc	.+10     	; 0x1c12 <__ftoa_engine+0xb8>
    1c08:	f8 0e       	add	r15, r24
    1c0a:	49 1f       	adc	r20, r25
    1c0c:	56 1f       	adc	r21, r22
    1c0e:	c7 1f       	adc	r28, r23
    1c10:	d1 1d       	adc	r29, r1
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	66 1f       	adc	r22, r22
    1c18:	77 1f       	adc	r23, r23
    1c1a:	06 94       	lsr	r0
    1c1c:	a1 f7       	brne	.-24     	; 0x1c06 <__ftoa_engine+0xac>
    1c1e:	05 90       	lpm	r0, Z+
    1c20:	07 94       	ror	r0
    1c22:	20 f4       	brcc	.+8      	; 0x1c2c <__ftoa_engine+0xd2>
    1c24:	49 0f       	add	r20, r25
    1c26:	56 1f       	adc	r21, r22
    1c28:	c7 1f       	adc	r28, r23
    1c2a:	d8 1f       	adc	r29, r24
    1c2c:	99 0f       	add	r25, r25
    1c2e:	66 1f       	adc	r22, r22
    1c30:	77 1f       	adc	r23, r23
    1c32:	88 1f       	adc	r24, r24
    1c34:	06 94       	lsr	r0
    1c36:	a9 f7       	brne	.-22     	; 0x1c22 <__ftoa_engine+0xc8>
    1c38:	84 91       	lpm	r24, Z+
    1c3a:	10 95       	com	r17
    1c3c:	17 70       	andi	r17, 0x07	; 7
    1c3e:	41 f0       	breq	.+16     	; 0x1c50 <__ftoa_engine+0xf6>
    1c40:	d6 95       	lsr	r29
    1c42:	c7 95       	ror	r28
    1c44:	57 95       	ror	r21
    1c46:	47 95       	ror	r20
    1c48:	f7 94       	ror	r15
    1c4a:	e7 94       	ror	r14
    1c4c:	1a 95       	dec	r17
    1c4e:	c1 f7       	brne	.-16     	; 0x1c40 <__ftoa_engine+0xe6>
    1c50:	ef e8       	ldi	r30, 0x8F	; 143
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	68 94       	set
    1c56:	15 90       	lpm	r1, Z+
    1c58:	15 91       	lpm	r17, Z+
    1c5a:	35 91       	lpm	r19, Z+
    1c5c:	65 91       	lpm	r22, Z+
    1c5e:	95 91       	lpm	r25, Z+
    1c60:	05 90       	lpm	r0, Z+
    1c62:	7f e2       	ldi	r23, 0x2F	; 47
    1c64:	73 95       	inc	r23
    1c66:	e1 18       	sub	r14, r1
    1c68:	f1 0a       	sbc	r15, r17
    1c6a:	43 0b       	sbc	r20, r19
    1c6c:	56 0b       	sbc	r21, r22
    1c6e:	c9 0b       	sbc	r28, r25
    1c70:	d0 09       	sbc	r29, r0
    1c72:	c0 f7       	brcc	.-16     	; 0x1c64 <__ftoa_engine+0x10a>
    1c74:	e1 0c       	add	r14, r1
    1c76:	f1 1e       	adc	r15, r17
    1c78:	43 1f       	adc	r20, r19
    1c7a:	56 1f       	adc	r21, r22
    1c7c:	c9 1f       	adc	r28, r25
    1c7e:	d0 1d       	adc	r29, r0
    1c80:	7e f4       	brtc	.+30     	; 0x1ca0 <__ftoa_engine+0x146>
    1c82:	70 33       	cpi	r23, 0x30	; 48
    1c84:	11 f4       	brne	.+4      	; 0x1c8a <__ftoa_engine+0x130>
    1c86:	8a 95       	dec	r24
    1c88:	e6 cf       	rjmp	.-52     	; 0x1c56 <__ftoa_engine+0xfc>
    1c8a:	e8 94       	clt
    1c8c:	01 50       	subi	r16, 0x01	; 1
    1c8e:	30 f0       	brcs	.+12     	; 0x1c9c <__ftoa_engine+0x142>
    1c90:	08 0f       	add	r16, r24
    1c92:	0a f4       	brpl	.+2      	; 0x1c96 <__ftoa_engine+0x13c>
    1c94:	00 27       	eor	r16, r16
    1c96:	02 17       	cp	r16, r18
    1c98:	08 f4       	brcc	.+2      	; 0x1c9c <__ftoa_engine+0x142>
    1c9a:	20 2f       	mov	r18, r16
    1c9c:	23 95       	inc	r18
    1c9e:	02 2f       	mov	r16, r18
    1ca0:	7a 33       	cpi	r23, 0x3A	; 58
    1ca2:	28 f0       	brcs	.+10     	; 0x1cae <__ftoa_engine+0x154>
    1ca4:	79 e3       	ldi	r23, 0x39	; 57
    1ca6:	7d 93       	st	X+, r23
    1ca8:	2a 95       	dec	r18
    1caa:	e9 f7       	brne	.-6      	; 0x1ca6 <__ftoa_engine+0x14c>
    1cac:	10 c0       	rjmp	.+32     	; 0x1cce <__ftoa_engine+0x174>
    1cae:	7d 93       	st	X+, r23
    1cb0:	2a 95       	dec	r18
    1cb2:	89 f6       	brne	.-94     	; 0x1c56 <__ftoa_engine+0xfc>
    1cb4:	06 94       	lsr	r0
    1cb6:	97 95       	ror	r25
    1cb8:	67 95       	ror	r22
    1cba:	37 95       	ror	r19
    1cbc:	17 95       	ror	r17
    1cbe:	17 94       	ror	r1
    1cc0:	e1 18       	sub	r14, r1
    1cc2:	f1 0a       	sbc	r15, r17
    1cc4:	43 0b       	sbc	r20, r19
    1cc6:	56 0b       	sbc	r21, r22
    1cc8:	c9 0b       	sbc	r28, r25
    1cca:	d0 09       	sbc	r29, r0
    1ccc:	98 f0       	brcs	.+38     	; 0x1cf4 <__ftoa_engine+0x19a>
    1cce:	23 95       	inc	r18
    1cd0:	7e 91       	ld	r23, -X
    1cd2:	73 95       	inc	r23
    1cd4:	7a 33       	cpi	r23, 0x3A	; 58
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <__ftoa_engine+0x180>
    1cd8:	70 e3       	ldi	r23, 0x30	; 48
    1cda:	7c 93       	st	X, r23
    1cdc:	20 13       	cpse	r18, r16
    1cde:	b8 f7       	brcc	.-18     	; 0x1cce <__ftoa_engine+0x174>
    1ce0:	7e 91       	ld	r23, -X
    1ce2:	70 61       	ori	r23, 0x10	; 16
    1ce4:	7d 93       	st	X+, r23
    1ce6:	30 f0       	brcs	.+12     	; 0x1cf4 <__ftoa_engine+0x19a>
    1ce8:	83 95       	inc	r24
    1cea:	71 e3       	ldi	r23, 0x31	; 49
    1cec:	7d 93       	st	X+, r23
    1cee:	70 e3       	ldi	r23, 0x30	; 48
    1cf0:	2a 95       	dec	r18
    1cf2:	e1 f7       	brne	.-8      	; 0x1cec <__ftoa_engine+0x192>
    1cf4:	11 24       	eor	r1, r1
    1cf6:	ef 90       	pop	r14
    1cf8:	ff 90       	pop	r15
    1cfa:	0f 91       	pop	r16
    1cfc:	1f 91       	pop	r17
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	99 27       	eor	r25, r25
    1d04:	87 fd       	sbrc	r24, 7
    1d06:	90 95       	com	r25
    1d08:	08 95       	ret

00001d0a <isspace>:
    1d0a:	91 11       	cpse	r25, r1
    1d0c:	49 c1       	rjmp	.+658    	; 0x1fa0 <__ctype_isfalse>
    1d0e:	80 32       	cpi	r24, 0x20	; 32
    1d10:	19 f0       	breq	.+6      	; 0x1d18 <isspace+0xe>
    1d12:	89 50       	subi	r24, 0x09	; 9
    1d14:	85 50       	subi	r24, 0x05	; 5
    1d16:	d0 f7       	brcc	.-12     	; 0x1d0c <isspace+0x2>
    1d18:	08 95       	ret

00001d1a <strncasecmp_P>:
    1d1a:	fb 01       	movw	r30, r22
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	41 50       	subi	r20, 0x01	; 1
    1d20:	50 40       	sbci	r21, 0x00	; 0
    1d22:	88 f0       	brcs	.+34     	; 0x1d46 <strncasecmp_P+0x2c>
    1d24:	8d 91       	ld	r24, X+
    1d26:	81 34       	cpi	r24, 0x41	; 65
    1d28:	1c f0       	brlt	.+6      	; 0x1d30 <strncasecmp_P+0x16>
    1d2a:	8b 35       	cpi	r24, 0x5B	; 91
    1d2c:	0c f4       	brge	.+2      	; 0x1d30 <strncasecmp_P+0x16>
    1d2e:	80 5e       	subi	r24, 0xE0	; 224
    1d30:	65 91       	lpm	r22, Z+
    1d32:	61 34       	cpi	r22, 0x41	; 65
    1d34:	1c f0       	brlt	.+6      	; 0x1d3c <strncasecmp_P+0x22>
    1d36:	6b 35       	cpi	r22, 0x5B	; 91
    1d38:	0c f4       	brge	.+2      	; 0x1d3c <strncasecmp_P+0x22>
    1d3a:	60 5e       	subi	r22, 0xE0	; 224
    1d3c:	86 1b       	sub	r24, r22
    1d3e:	61 11       	cpse	r22, r1
    1d40:	71 f3       	breq	.-36     	; 0x1d1e <strncasecmp_P+0x4>
    1d42:	99 0b       	sbc	r25, r25
    1d44:	08 95       	ret
    1d46:	88 1b       	sub	r24, r24
    1d48:	fc cf       	rjmp	.-8      	; 0x1d42 <strncasecmp_P+0x28>

00001d4a <strnlen_P>:
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	05 90       	lpm	r0, Z+
    1d4e:	61 50       	subi	r22, 0x01	; 1
    1d50:	70 40       	sbci	r23, 0x00	; 0
    1d52:	01 10       	cpse	r0, r1
    1d54:	d8 f7       	brcc	.-10     	; 0x1d4c <strnlen_P+0x2>
    1d56:	80 95       	com	r24
    1d58:	90 95       	com	r25
    1d5a:	8e 0f       	add	r24, r30
    1d5c:	9f 1f       	adc	r25, r31
    1d5e:	08 95       	ret

00001d60 <strnlen>:
    1d60:	fc 01       	movw	r30, r24
    1d62:	61 50       	subi	r22, 0x01	; 1
    1d64:	70 40       	sbci	r23, 0x00	; 0
    1d66:	01 90       	ld	r0, Z+
    1d68:	01 10       	cpse	r0, r1
    1d6a:	d8 f7       	brcc	.-10     	; 0x1d62 <strnlen+0x2>
    1d6c:	80 95       	com	r24
    1d6e:	90 95       	com	r25
    1d70:	8e 0f       	add	r24, r30
    1d72:	9f 1f       	adc	r25, r31
    1d74:	08 95       	ret

00001d76 <fputc>:
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	8c 01       	movw	r16, r24
    1d80:	eb 01       	movw	r28, r22
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	81 ff       	sbrs	r24, 1
    1d86:	1b c0       	rjmp	.+54     	; 0x1dbe <fputc+0x48>
    1d88:	82 ff       	sbrs	r24, 2
    1d8a:	0d c0       	rjmp	.+26     	; 0x1da6 <fputc+0x30>
    1d8c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d8e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d90:	8c 81       	ldd	r24, Y+4	; 0x04
    1d92:	9d 81       	ldd	r25, Y+5	; 0x05
    1d94:	28 17       	cp	r18, r24
    1d96:	39 07       	cpc	r19, r25
    1d98:	64 f4       	brge	.+24     	; 0x1db2 <fputc+0x3c>
    1d9a:	e8 81       	ld	r30, Y
    1d9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d9e:	01 93       	st	Z+, r16
    1da0:	f9 83       	std	Y+1, r31	; 0x01
    1da2:	e8 83       	st	Y, r30
    1da4:	06 c0       	rjmp	.+12     	; 0x1db2 <fputc+0x3c>
    1da6:	e8 85       	ldd	r30, Y+8	; 0x08
    1da8:	f9 85       	ldd	r31, Y+9	; 0x09
    1daa:	80 2f       	mov	r24, r16
    1dac:	09 95       	icall
    1dae:	89 2b       	or	r24, r25
    1db0:	31 f4       	brne	.+12     	; 0x1dbe <fputc+0x48>
    1db2:	8e 81       	ldd	r24, Y+6	; 0x06
    1db4:	9f 81       	ldd	r25, Y+7	; 0x07
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	9f 83       	std	Y+7, r25	; 0x07
    1dba:	8e 83       	std	Y+6, r24	; 0x06
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <fputc+0x4c>
    1dbe:	0f ef       	ldi	r16, 0xFF	; 255
    1dc0:	1f ef       	ldi	r17, 0xFF	; 255
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	1f 91       	pop	r17
    1dca:	0f 91       	pop	r16
    1dcc:	08 95       	ret

00001dce <__ultoa_invert>:
    1dce:	fa 01       	movw	r30, r20
    1dd0:	aa 27       	eor	r26, r26
    1dd2:	28 30       	cpi	r18, 0x08	; 8
    1dd4:	51 f1       	breq	.+84     	; 0x1e2a <__ultoa_invert+0x5c>
    1dd6:	20 31       	cpi	r18, 0x10	; 16
    1dd8:	81 f1       	breq	.+96     	; 0x1e3a <__ultoa_invert+0x6c>
    1dda:	e8 94       	clt
    1ddc:	6f 93       	push	r22
    1dde:	6e 7f       	andi	r22, 0xFE	; 254
    1de0:	6e 5f       	subi	r22, 0xFE	; 254
    1de2:	7f 4f       	sbci	r23, 0xFF	; 255
    1de4:	8f 4f       	sbci	r24, 0xFF	; 255
    1de6:	9f 4f       	sbci	r25, 0xFF	; 255
    1de8:	af 4f       	sbci	r26, 0xFF	; 255
    1dea:	b1 e0       	ldi	r27, 0x01	; 1
    1dec:	3e d0       	rcall	.+124    	; 0x1e6a <__ultoa_invert+0x9c>
    1dee:	b4 e0       	ldi	r27, 0x04	; 4
    1df0:	3c d0       	rcall	.+120    	; 0x1e6a <__ultoa_invert+0x9c>
    1df2:	67 0f       	add	r22, r23
    1df4:	78 1f       	adc	r23, r24
    1df6:	89 1f       	adc	r24, r25
    1df8:	9a 1f       	adc	r25, r26
    1dfa:	a1 1d       	adc	r26, r1
    1dfc:	68 0f       	add	r22, r24
    1dfe:	79 1f       	adc	r23, r25
    1e00:	8a 1f       	adc	r24, r26
    1e02:	91 1d       	adc	r25, r1
    1e04:	a1 1d       	adc	r26, r1
    1e06:	6a 0f       	add	r22, r26
    1e08:	71 1d       	adc	r23, r1
    1e0a:	81 1d       	adc	r24, r1
    1e0c:	91 1d       	adc	r25, r1
    1e0e:	a1 1d       	adc	r26, r1
    1e10:	20 d0       	rcall	.+64     	; 0x1e52 <__ultoa_invert+0x84>
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <__ultoa_invert+0x48>
    1e14:	68 94       	set
    1e16:	3f 91       	pop	r19
    1e18:	2a e0       	ldi	r18, 0x0A	; 10
    1e1a:	26 9f       	mul	r18, r22
    1e1c:	11 24       	eor	r1, r1
    1e1e:	30 19       	sub	r19, r0
    1e20:	30 5d       	subi	r19, 0xD0	; 208
    1e22:	31 93       	st	Z+, r19
    1e24:	de f6       	brtc	.-74     	; 0x1ddc <__ultoa_invert+0xe>
    1e26:	cf 01       	movw	r24, r30
    1e28:	08 95       	ret
    1e2a:	46 2f       	mov	r20, r22
    1e2c:	47 70       	andi	r20, 0x07	; 7
    1e2e:	40 5d       	subi	r20, 0xD0	; 208
    1e30:	41 93       	st	Z+, r20
    1e32:	b3 e0       	ldi	r27, 0x03	; 3
    1e34:	0f d0       	rcall	.+30     	; 0x1e54 <__ultoa_invert+0x86>
    1e36:	c9 f7       	brne	.-14     	; 0x1e2a <__ultoa_invert+0x5c>
    1e38:	f6 cf       	rjmp	.-20     	; 0x1e26 <__ultoa_invert+0x58>
    1e3a:	46 2f       	mov	r20, r22
    1e3c:	4f 70       	andi	r20, 0x0F	; 15
    1e3e:	40 5d       	subi	r20, 0xD0	; 208
    1e40:	4a 33       	cpi	r20, 0x3A	; 58
    1e42:	18 f0       	brcs	.+6      	; 0x1e4a <__ultoa_invert+0x7c>
    1e44:	49 5d       	subi	r20, 0xD9	; 217
    1e46:	31 fd       	sbrc	r19, 1
    1e48:	40 52       	subi	r20, 0x20	; 32
    1e4a:	41 93       	st	Z+, r20
    1e4c:	02 d0       	rcall	.+4      	; 0x1e52 <__ultoa_invert+0x84>
    1e4e:	a9 f7       	brne	.-22     	; 0x1e3a <__ultoa_invert+0x6c>
    1e50:	ea cf       	rjmp	.-44     	; 0x1e26 <__ultoa_invert+0x58>
    1e52:	b4 e0       	ldi	r27, 0x04	; 4
    1e54:	a6 95       	lsr	r26
    1e56:	97 95       	ror	r25
    1e58:	87 95       	ror	r24
    1e5a:	77 95       	ror	r23
    1e5c:	67 95       	ror	r22
    1e5e:	ba 95       	dec	r27
    1e60:	c9 f7       	brne	.-14     	; 0x1e54 <__ultoa_invert+0x86>
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	61 05       	cpc	r22, r1
    1e66:	71 05       	cpc	r23, r1
    1e68:	08 95       	ret
    1e6a:	9b 01       	movw	r18, r22
    1e6c:	ac 01       	movw	r20, r24
    1e6e:	0a 2e       	mov	r0, r26
    1e70:	06 94       	lsr	r0
    1e72:	57 95       	ror	r21
    1e74:	47 95       	ror	r20
    1e76:	37 95       	ror	r19
    1e78:	27 95       	ror	r18
    1e7a:	ba 95       	dec	r27
    1e7c:	c9 f7       	brne	.-14     	; 0x1e70 <__ultoa_invert+0xa2>
    1e7e:	62 0f       	add	r22, r18
    1e80:	73 1f       	adc	r23, r19
    1e82:	84 1f       	adc	r24, r20
    1e84:	95 1f       	adc	r25, r21
    1e86:	a0 1d       	adc	r26, r0
    1e88:	08 95       	ret

00001e8a <__cmpsf2>:
    1e8a:	03 d0       	rcall	.+6      	; 0x1e92 <__fp_cmp>
    1e8c:	08 f4       	brcc	.+2      	; 0x1e90 <__cmpsf2+0x6>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	08 95       	ret

00001e92 <__fp_cmp>:
    1e92:	99 0f       	add	r25, r25
    1e94:	00 08       	sbc	r0, r0
    1e96:	55 0f       	add	r21, r21
    1e98:	aa 0b       	sbc	r26, r26
    1e9a:	e0 e8       	ldi	r30, 0x80	; 128
    1e9c:	fe ef       	ldi	r31, 0xFE	; 254
    1e9e:	16 16       	cp	r1, r22
    1ea0:	17 06       	cpc	r1, r23
    1ea2:	e8 07       	cpc	r30, r24
    1ea4:	f9 07       	cpc	r31, r25
    1ea6:	c0 f0       	brcs	.+48     	; 0x1ed8 <__fp_cmp+0x46>
    1ea8:	12 16       	cp	r1, r18
    1eaa:	13 06       	cpc	r1, r19
    1eac:	e4 07       	cpc	r30, r20
    1eae:	f5 07       	cpc	r31, r21
    1eb0:	98 f0       	brcs	.+38     	; 0x1ed8 <__fp_cmp+0x46>
    1eb2:	62 1b       	sub	r22, r18
    1eb4:	73 0b       	sbc	r23, r19
    1eb6:	84 0b       	sbc	r24, r20
    1eb8:	95 0b       	sbc	r25, r21
    1eba:	39 f4       	brne	.+14     	; 0x1eca <__fp_cmp+0x38>
    1ebc:	0a 26       	eor	r0, r26
    1ebe:	61 f0       	breq	.+24     	; 0x1ed8 <__fp_cmp+0x46>
    1ec0:	23 2b       	or	r18, r19
    1ec2:	24 2b       	or	r18, r20
    1ec4:	25 2b       	or	r18, r21
    1ec6:	21 f4       	brne	.+8      	; 0x1ed0 <__fp_cmp+0x3e>
    1ec8:	08 95       	ret
    1eca:	0a 26       	eor	r0, r26
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <__fp_cmp+0x3e>
    1ece:	a1 40       	sbci	r26, 0x01	; 1
    1ed0:	a6 95       	lsr	r26
    1ed2:	8f ef       	ldi	r24, 0xFF	; 255
    1ed4:	81 1d       	adc	r24, r1
    1ed6:	81 1d       	adc	r24, r1
    1ed8:	08 95       	ret

00001eda <__mulsf3>:
    1eda:	0b d0       	rcall	.+22     	; 0x1ef2 <__mulsf3x>
    1edc:	b3 c8       	rjmp	.-3738   	; 0x1044 <__fp_round>
    1ede:	a4 d8       	rcall	.-3768   	; 0x1028 <__fp_pscA>
    1ee0:	28 f0       	brcs	.+10     	; 0x1eec <__mulsf3+0x12>
    1ee2:	a9 d8       	rcall	.-3758   	; 0x1036 <__fp_pscB>
    1ee4:	18 f0       	brcs	.+6      	; 0x1eec <__mulsf3+0x12>
    1ee6:	95 23       	and	r25, r21
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <__mulsf3+0x12>
    1eea:	95 c8       	rjmp	.-3798   	; 0x1016 <__fp_inf>
    1eec:	9a c8       	rjmp	.-3788   	; 0x1022 <__fp_nan>
    1eee:	11 24       	eor	r1, r1
    1ef0:	dd c8       	rjmp	.-3654   	; 0x10ac <__fp_szero>

00001ef2 <__mulsf3x>:
    1ef2:	b9 d8       	rcall	.-3726   	; 0x1066 <__fp_split3>
    1ef4:	a0 f3       	brcs	.-24     	; 0x1ede <__mulsf3+0x4>

00001ef6 <__mulsf3_pse>:
    1ef6:	95 9f       	mul	r25, r21
    1ef8:	d1 f3       	breq	.-12     	; 0x1eee <__mulsf3+0x14>
    1efa:	95 0f       	add	r25, r21
    1efc:	50 e0       	ldi	r21, 0x00	; 0
    1efe:	55 1f       	adc	r21, r21
    1f00:	62 9f       	mul	r22, r18
    1f02:	f0 01       	movw	r30, r0
    1f04:	72 9f       	mul	r23, r18
    1f06:	bb 27       	eor	r27, r27
    1f08:	f0 0d       	add	r31, r0
    1f0a:	b1 1d       	adc	r27, r1
    1f0c:	63 9f       	mul	r22, r19
    1f0e:	aa 27       	eor	r26, r26
    1f10:	f0 0d       	add	r31, r0
    1f12:	b1 1d       	adc	r27, r1
    1f14:	aa 1f       	adc	r26, r26
    1f16:	64 9f       	mul	r22, r20
    1f18:	66 27       	eor	r22, r22
    1f1a:	b0 0d       	add	r27, r0
    1f1c:	a1 1d       	adc	r26, r1
    1f1e:	66 1f       	adc	r22, r22
    1f20:	82 9f       	mul	r24, r18
    1f22:	22 27       	eor	r18, r18
    1f24:	b0 0d       	add	r27, r0
    1f26:	a1 1d       	adc	r26, r1
    1f28:	62 1f       	adc	r22, r18
    1f2a:	73 9f       	mul	r23, r19
    1f2c:	b0 0d       	add	r27, r0
    1f2e:	a1 1d       	adc	r26, r1
    1f30:	62 1f       	adc	r22, r18
    1f32:	83 9f       	mul	r24, r19
    1f34:	a0 0d       	add	r26, r0
    1f36:	61 1d       	adc	r22, r1
    1f38:	22 1f       	adc	r18, r18
    1f3a:	74 9f       	mul	r23, r20
    1f3c:	33 27       	eor	r19, r19
    1f3e:	a0 0d       	add	r26, r0
    1f40:	61 1d       	adc	r22, r1
    1f42:	23 1f       	adc	r18, r19
    1f44:	84 9f       	mul	r24, r20
    1f46:	60 0d       	add	r22, r0
    1f48:	21 1d       	adc	r18, r1
    1f4a:	82 2f       	mov	r24, r18
    1f4c:	76 2f       	mov	r23, r22
    1f4e:	6a 2f       	mov	r22, r26
    1f50:	11 24       	eor	r1, r1
    1f52:	9f 57       	subi	r25, 0x7F	; 127
    1f54:	50 40       	sbci	r21, 0x00	; 0
    1f56:	8a f0       	brmi	.+34     	; 0x1f7a <__mulsf3_pse+0x84>
    1f58:	e1 f0       	breq	.+56     	; 0x1f92 <__mulsf3_pse+0x9c>
    1f5a:	88 23       	and	r24, r24
    1f5c:	4a f0       	brmi	.+18     	; 0x1f70 <__mulsf3_pse+0x7a>
    1f5e:	ee 0f       	add	r30, r30
    1f60:	ff 1f       	adc	r31, r31
    1f62:	bb 1f       	adc	r27, r27
    1f64:	66 1f       	adc	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	91 50       	subi	r25, 0x01	; 1
    1f6c:	50 40       	sbci	r21, 0x00	; 0
    1f6e:	a9 f7       	brne	.-22     	; 0x1f5a <__mulsf3_pse+0x64>
    1f70:	9e 3f       	cpi	r25, 0xFE	; 254
    1f72:	51 05       	cpc	r21, r1
    1f74:	70 f0       	brcs	.+28     	; 0x1f92 <__mulsf3_pse+0x9c>
    1f76:	4f c8       	rjmp	.-3938   	; 0x1016 <__fp_inf>
    1f78:	99 c8       	rjmp	.-3790   	; 0x10ac <__fp_szero>
    1f7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f7c:	ec f3       	brlt	.-6      	; 0x1f78 <__mulsf3_pse+0x82>
    1f7e:	98 3e       	cpi	r25, 0xE8	; 232
    1f80:	dc f3       	brlt	.-10     	; 0x1f78 <__mulsf3_pse+0x82>
    1f82:	86 95       	lsr	r24
    1f84:	77 95       	ror	r23
    1f86:	67 95       	ror	r22
    1f88:	b7 95       	ror	r27
    1f8a:	f7 95       	ror	r31
    1f8c:	e7 95       	ror	r30
    1f8e:	9f 5f       	subi	r25, 0xFF	; 255
    1f90:	c1 f7       	brne	.-16     	; 0x1f82 <__mulsf3_pse+0x8c>
    1f92:	fe 2b       	or	r31, r30
    1f94:	88 0f       	add	r24, r24
    1f96:	91 1d       	adc	r25, r1
    1f98:	96 95       	lsr	r25
    1f9a:	87 95       	ror	r24
    1f9c:	97 f9       	bld	r25, 7
    1f9e:	08 95       	ret

00001fa0 <__ctype_isfalse>:
    1fa0:	99 27       	eor	r25, r25
    1fa2:	88 27       	eor	r24, r24

00001fa4 <__ctype_istrue>:
    1fa4:	08 95       	ret

00001fa6 <__prologue_saves__>:
    1fa6:	2f 92       	push	r2
    1fa8:	3f 92       	push	r3
    1faa:	4f 92       	push	r4
    1fac:	5f 92       	push	r5
    1fae:	6f 92       	push	r6
    1fb0:	7f 92       	push	r7
    1fb2:	8f 92       	push	r8
    1fb4:	9f 92       	push	r9
    1fb6:	af 92       	push	r10
    1fb8:	bf 92       	push	r11
    1fba:	cf 92       	push	r12
    1fbc:	df 92       	push	r13
    1fbe:	ef 92       	push	r14
    1fc0:	ff 92       	push	r15
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	ca 1b       	sub	r28, r26
    1fd0:	db 0b       	sbc	r29, r27
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	09 94       	ijmp

00001fde <__epilogue_restores__>:
    1fde:	2a 88       	ldd	r2, Y+18	; 0x12
    1fe0:	39 88       	ldd	r3, Y+17	; 0x11
    1fe2:	48 88       	ldd	r4, Y+16	; 0x10
    1fe4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fe6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fe8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fea:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fec:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fee:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ff0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ff2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ff4:	df 80       	ldd	r13, Y+7	; 0x07
    1ff6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ff8:	fd 80       	ldd	r15, Y+5	; 0x05
    1ffa:	0c 81       	ldd	r16, Y+4	; 0x04
    1ffc:	1b 81       	ldd	r17, Y+3	; 0x03
    1ffe:	aa 81       	ldd	r26, Y+2	; 0x02
    2000:	b9 81       	ldd	r27, Y+1	; 0x01
    2002:	ce 0f       	add	r28, r30
    2004:	d1 1d       	adc	r29, r1
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	ed 01       	movw	r28, r26
    2012:	08 95       	ret

00002014 <_exit>:
    2014:	f8 94       	cli

00002016 <__stop_program>:
    2016:	ff cf       	rjmp	.-2      	; 0x2016 <__stop_program>
